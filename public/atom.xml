<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[play a litle more!]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-16T09:11:53.561Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[windpuller]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[git base commands]]></title>
    <link href="http://yoursite.com/2015/09/24/git-base-commands/"/>
    <id>http://yoursite.com/2015/09/24/git-base-commands/</id>
    <published>2015-09-24T03:52:12.000Z</published>
    <updated>2015-10-16T09:11:53.561Z</updated>
    <content type="html"><![CDATA[<h4 id="初始化">初始化</h4><p><code>$ mkdir test</code><br><code>$ cd test</code><br><code>$ git init</code></p>
<h4 id="config">config</h4><p><code>$ git config –global user.name username</code><br><code>$ git config –global user.email useremail.chn@gmail.com</code></p>
<h4 id="文件修改_、查看状态、文件添加以及修改提交">文件修改 、查看状态、文件添加以及修改提交</h4><p><code>$ echo “hello world”&gt;&gt;new.txt</code><br><code>$ git status</code><br><code>$ git add new.txt</code><br><code>$ git status</code><br>提交第一个版本<br><code>$ git commit -m “first”</code> </p>
<p><code>$ echo “hello new world”&gt;&gt;new.txt</code><br><code>$ git status</code><br><code>$ git add new.txt</code><br><code>$ git status</code><br>提交第二个版本<br><code>$ git commit -m “second”</code></p>
<h4 id="版本切换">版本切换</h4><p>查看更新记录<br><code>$ git log</code><br>使用能够区别版本的前几位即可<br><code>$ git checkout commit-id</code></p>
<h4 id="远程提交">远程提交</h4><p>添加远程仓库<br><code>$ git remote add origin <a href="https://github.com/windpuller/test.git" target="_blank" rel="external">https://github.com/windpuller/test.git</a></code><br>将修改提交到服务器端<br><code>$ git push -u origin master</code></p>
<h4 id="检出仓库">检出仓库</h4><p>创建本地仓库的克隆版本<br><code>$ git clone /path/to/repository</code><br>创建远端服务器的克隆版本<br><code>$ git clone uxername@host:/past/to/repository</code></p>
<h4 id="分支">分支</h4><p>创建分支<br><code>$ git branch branch1</code><br>切换分支<br><code>$ git checkout branch1</code><br>删除分支<br><code>$ git branch -d branch1 </code><br>将分支推送到远端仓库，不推送的话分支是不为他人所见的<br><code>$ git push origin branch1</code></p>
<h4 id="更新与合并">更新与合并</h4><p>更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能<br><code>$ git pull</code><br>合并其他分支到当前分支<br><code>$ git merge branch</code><br>在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。<br>这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要执行以下命令以将它们标记为合并成功：<br><code>$ git add filename</code><br>在合并改动之前，可以使用如下命令预览差异：<br><code>$git diff source_branch target_branch</code></p>
<h4 id="标签">标签</h4><p>为某个版本创建标签<br><code>$ git tag tag-name commit-ID</code></p>
<h4 id="替换本地改动">替换本地改动</h4><p>如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响<br><code>$ git checkout – filename</code><br>如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：<br><code>$ git fetch origin</code><br><code>$ git reset –hard origin/master</code></p>
<h4 id="实用小贴士">实用小贴士</h4><p>内建的图形化git<br><code>$ gitk</code><br>彩色的git输出<br><code>$ git config color.ui true</code><br>显示历史记录时，每个提交的信息只显示一行<br><code>$ git config format.pretty oneline</code><br>交互式添加文件到暂存区<br><code>$ git add -i</code></p>
<h4 id="参考文献：">参考文献：</h4><ol>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">http://rogerdudler.github.io/git-guide/index.zh.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="初始化">初始化</h4><p><code>$ mkdir test</code><br><code>$ cd test</code><br><code>$ git init</code></p>
<h4 id="config">config</h4><p><co]]>
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
