{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":0}],"Cache":[{"_id":"source/_posts/Spring-circular-dependency.md","shasum":"4b6f03f631de3db0518aefebb658c489b5acc853","modified":1454480240978},{"_id":"source/_posts/csrf-defense.md","shasum":"0efd27818fcddd1214c5453fa7a51278f5f84550","modified":1454479918708},{"_id":"source/_posts/git-base-commands.md","shasum":"86497d89baeec9e0f2c151f174e4307aecb3989c","modified":1454482679528},{"_id":"source/_posts/mount-partitions-on-startup-in-archlinux.md","shasum":"87a5bb22b6d7309caacbae32e6c80bab0989948d","modified":1454479582171},{"_id":"source/_posts/transactional.md","shasum":"5988525cdc33f61ef2a66230a03f9114cd95a60e","modified":1446970747594},{"_id":"themes/light/source/css/_base/utils.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1454478356984},{"_id":"themes/light/LICENSE","shasum":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1454478356981},{"_id":"themes/light/README.md","shasum":"aa189c7ff03c60d8fceb009f5fca1a61d8a0ecdf","modified":1454478356981},{"_id":"themes/light/_config.yml","shasum":"54873f9af5e1d1c802fcd7c642c4187f1f04e6b9","modified":1454483626831},{"_id":"themes/light/languages/de.yml","shasum":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1454478356984},{"_id":"themes/light/languages/default.yml","shasum":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1454478356984},{"_id":"themes/light/languages/es.yml","shasum":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1454478356984},{"_id":"themes/light/languages/no.yml","shasum":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1454478356984},{"_id":"themes/light/languages/pl.yml","shasum":"3f36d08e84a85651bf777cec0752193057c08430","modified":1454478356984},{"_id":"themes/light/languages/ru.yml","shasum":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1454478356984},{"_id":"themes/light/languages/zh-CN.yml","shasum":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1454478356984},{"_id":"themes/light/languages/zh-TW.yml","shasum":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1454478356984},{"_id":"themes/light/layout/_partial/after_footer.ejs","shasum":"be0905e9fb3730d63685b5db579875538a92de95","modified":1454478356984},{"_id":"themes/light/layout/_partial/archive.ejs","shasum":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1454478356984},{"_id":"themes/light/layout/_partial/article.ejs","shasum":"508fb3aaac2b68e6f24bd5259a0684e23f46fe37","modified":1454478356984},{"_id":"themes/light/layout/_partial/comment.ejs","shasum":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1454478356984},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","shasum":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1454478356984},{"_id":"themes/light/layout/_partial/footer.ejs","shasum":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1454478356984},{"_id":"themes/light/layout/_partial/google_analytics.ejs","shasum":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1454478356984},{"_id":"themes/light/layout/_partial/head.ejs","shasum":"5e110e4b0a2a896a073dfc7739220025b02a4077","modified":1454478356984},{"_id":"themes/light/layout/_partial/header.ejs","shasum":"224ea7f0fccc29418583a5c59497a8ece0073301","modified":1454478356984},{"_id":"themes/light/layout/_partial/pagination.ejs","shasum":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/category.ejs","shasum":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/share.ejs","shasum":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/tag.ejs","shasum":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/title.ejs","shasum":"d7fbc575d35ae68f9045a382c651450e4131f335","modified":1454478356984},{"_id":"themes/light/layout/_partial/sidebar.ejs","shasum":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1454478356984},{"_id":"themes/light/layout/_widget/category.ejs","shasum":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1454478356984},{"_id":"themes/light/layout/_widget/recent_posts.ejs","shasum":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1454478356984},{"_id":"themes/light/layout/_widget/search.ejs","shasum":"55c707f3aa7453c305c41898ad22556edd213830","modified":1454478356984},{"_id":"themes/light/layout/_widget/tag.ejs","shasum":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1454478356984},{"_id":"themes/light/layout/_widget/tagcloud.ejs","shasum":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1454478356984},{"_id":"themes/light/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1454478356984},{"_id":"themes/light/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1454478356984},{"_id":"themes/light/layout/index.ejs","shasum":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1454478356984},{"_id":"themes/light/layout/layout.ejs","shasum":"72da76881ebf00e71d7cc196f377e37a17ec7a6f","modified":1454478356984},{"_id":"themes/light/layout/page.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1454478356984},{"_id":"themes/light/layout/post.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1454478356984},{"_id":"themes/light/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1454478356984},{"_id":"themes/light/source/css/_base/layout.styl","shasum":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1454478356984},{"_id":"themes/light/source/css/_base/variable.styl","shasum":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1454478356984},{"_id":"themes/light/source/css/_partial/archive.styl","shasum":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1454478356984},{"_id":"themes/light/source/css/_partial/article.styl","shasum":"3750f8cb4208941864247224f1dc7a256992ba8b","modified":1454478356984},{"_id":"themes/light/source/css/_partial/comment.styl","shasum":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1454478356984},{"_id":"themes/light/source/css/_partial/footer.styl","shasum":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1454478356984},{"_id":"themes/light/source/css/_partial/header.styl","shasum":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1454478356984},{"_id":"themes/light/source/css/_partial/index.styl","shasum":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1454478356984},{"_id":"themes/light/source/css/_partial/sidebar.styl","shasum":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1454478356984},{"_id":"themes/light/source/css/_partial/syntax.styl","shasum":"8d20eb41b8ba290b6c7d520c4f2d88bb9b51d60e","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","shasum":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","shasum":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1454478356984},{"_id":"themes/light/source/css/style.styl","shasum":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1454478356984},{"_id":"themes/light/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1454478356984},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1454478356984},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1454478356984},{"_id":"themes/light/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1454478356984},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","shasum":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1454478356984},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1454571058744,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/gallery.js","modified":1454571058748,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1454571058751,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1454571058752,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1454571058757,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1454571058759,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1454571058761,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1454571058762,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1454571058765,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1454571058766,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1454571059381,"shasum":"c1f50770fa10e71f85c4b7f26bb821924de38f53"},{"_id":"public/css/font/fontawesome-webfont.woff","modified":1454571059480,"shasum":"0612cddf2f835cceffccc88fd194f97367d0b024"},{"_id":"public/css/font/fontawesome-webfont.ttf","modified":1454571059483,"shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c"},{"_id":"public/css/font/fontawesome-webfont.svg","modified":1454571059487,"shasum":"d162419c91b8bab3a4fd327c933a0fcf3799c251"},{"_id":"public/css/font/fontawesome-webfont.eot","modified":1454571059490,"shasum":"d775f599ff3f23be082e6a9604b4898718923a37"},{"_id":"public/2016/01/17/mount-partitions-on-startup-in-archlinux/index.html","modified":1454571059515,"shasum":"222d6d86aaa7af5ba6eeff49a445a29922d0173d"},{"_id":"public/2015/11/22/csrf-defense/index.html","modified":1454571059536,"shasum":"349e67d4e19d18ae095c6e185c94c83eb58ad0ad"},{"_id":"public/2015/11/08/transactional/index.html","modified":1454571059548,"shasum":"3a27bacfe8c2fa44899d2fc193347ab22f9934be"},{"_id":"public/2015/10/25/Spring-circular-dependency/index.html","modified":1454571059557,"shasum":"720d38065acd0249e960bb58631b207c21cd6160"},{"_id":"public/2015/09/24/git-base-commands/index.html","modified":1454571059570,"shasum":"31ac2feb3bb6c1ee5cfec161fc7265ad50d9aba8"},{"_id":"public/archives/index.html","modified":1454571059583,"shasum":"e98213c180c17ceacdca1f8a370f047c06fc8687"},{"_id":"public/archives/2015/index.html","modified":1454571059591,"shasum":"077013e571f2e497511c6e50d769893bf3bdcbce"},{"_id":"public/archives/2015/09/index.html","modified":1454571059599,"shasum":"5ff10a303e99058414f46596871dca6e4f801f8a"},{"_id":"public/archives/2015/10/index.html","modified":1454571059607,"shasum":"e0b7db39f4d604ec6974ae1bf9f1f2b80db74341"},{"_id":"public/archives/2015/11/index.html","modified":1454571059614,"shasum":"a1a1e08d1b04c44dd4404cc0a776afb8e15c7fa3"},{"_id":"public/archives/2016/index.html","modified":1454571059621,"shasum":"4a9cdd23a00b422bba278718b2bc2be711b1d965"},{"_id":"public/archives/2016/01/index.html","modified":1454571059629,"shasum":"e32fd2d95dcf82af0255a4e8ea4637d5c89a26db"},{"_id":"public/atom.xml","modified":1454571059631,"shasum":"26de53b319341a3d0712d1a548f49af6553e90d0"},{"_id":"public/index.html","modified":1454571059652,"shasum":"548dd3f7e8f38afe7fbe9dbec55a82bbd34d3fbb"},{"_id":"public/sitemap.xml","modified":1454571059653,"shasum":"cfbc083546888bfbf7349c3757c6fa1373735df2"},{"_id":"public/tags/circular-dependency/index.html","modified":1454571059659,"shasum":"418e1122ac46afb0ade860be08b39117fd76b739"},{"_id":"public/tags/spring/index.html","modified":1454571059668,"shasum":"2ca63d19d747f483e5ff0ee89764e054f5d0766c"},{"_id":"public/tags/java/index.html","modified":1454571059676,"shasum":"61ee07b93fb59b7e0de55d85d59282f9caa831a4"},{"_id":"public/tags/inherited/index.html","modified":1454571059684,"shasum":"ca5c03c49a72ee8a33a4035388137b4a787d0813"},{"_id":"public/tags/transactional/index.html","modified":1454571059691,"shasum":"925ad00086b1f784d2d799ba1c0969b150a954f6"},{"_id":"public/tags/archlinux/index.html","modified":1454571059699,"shasum":"d1ff0ba327c29c5a4ac0b6faf5afee3a3dbb3a4b"},{"_id":"public/tags/mount-partitions/index.html","modified":1454571059705,"shasum":"fc96988830b926e01b67ebb2b1500262591e4da0"},{"_id":"public/tags/grub-rescue/index.html","modified":1454571059712,"shasum":"5c9902a6c7606a8879ad1b0b25fea0b9420ae881"},{"_id":"public/tags/git/index.html","modified":1454571059719,"shasum":"277e5b3f090d8c190c41270873dc5f9320894c3c"},{"_id":"public/tags/csrf/index.html","modified":1454571059727,"shasum":"f8fd28ea510f100cb961e992748ecb53545b3f2b"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Spring circular dependency","date":"2015-10-25T06:11:22.000Z","_content":"最近踩了一个继承加循环依赖的坑，抽象出的代码如下：\nChildClass:\n```\n@Service\npublic class ChildClass extends ParentClass {\n\n    @Resource\n    private TestService testService;\n\n    public String play() {\n        return testService.getParent().play();\n    }\n}\n```\nParentClass:\n```\npublic class ParentClass {\n\n    private String value = \"I am parent class\";\n\n    public String play() {\n        return value;\n    }\n\n    public void setValue(String str) {\n        this.value = str;\n    }\n}\n```\nTestService:\n```\n@Service\npublic class TestService {\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent = create();\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public ParentClass create() {\n        try {\n            Class classDefinition = Class.forName(\"com.springapp.mvc.inherited.ChildClass\");\n            ParentClass parent = (ParentClass) classDefinition.getConstructor(new Class[0]).newInstance(new Object[0]);\n            parent.setValue(\"I was processed by test service\");\n            return parent;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```\nResultController:\n```\n@Controller\n@RequestMapping(\"/inherited\")\npublic class ResultController {\n\n    @Resource\n    private ChildClass childClass;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView printWelcome() {\n        ModelAndView modelAndView = new ModelAndView(\"hello\");\n        modelAndView.addObject(\"message\", childClass.play());\n        return modelAndView;\n    }\n}\n```\n\n我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。\n\n之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：\nParentClass:\n```\n@Service\npublic class TestService {\n    \n    @Resource\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent.setValue(\"I was processed by test service\");\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n}\n```\n此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。\n<code>＠Resource</code>部分注解：\n```\n * Even though this annotation is not marked Inherited, deployment\n * tools are required to examine all superclasses of any component\n * class to discover all uses of this annotation in all superclasses.\n * All such annotation instances specify resources that are needed\n * by the application component.  Note that this annotation may\n * appear on private fields and methods of superclasses; the container\n * is required to perform injection in these cases as well.\n```\n","source":"_posts/Spring-circular-dependency.md","raw":"title: Spring circular dependency\ndate: 2015-10-25 14:11:22\ntags: [circular dependency, spring, java, inherited]\n---\n最近踩了一个继承加循环依赖的坑，抽象出的代码如下：\nChildClass:\n```\n@Service\npublic class ChildClass extends ParentClass {\n\n    @Resource\n    private TestService testService;\n\n    public String play() {\n        return testService.getParent().play();\n    }\n}\n```\nParentClass:\n```\npublic class ParentClass {\n\n    private String value = \"I am parent class\";\n\n    public String play() {\n        return value;\n    }\n\n    public void setValue(String str) {\n        this.value = str;\n    }\n}\n```\nTestService:\n```\n@Service\npublic class TestService {\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent = create();\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public ParentClass create() {\n        try {\n            Class classDefinition = Class.forName(\"com.springapp.mvc.inherited.ChildClass\");\n            ParentClass parent = (ParentClass) classDefinition.getConstructor(new Class[0]).newInstance(new Object[0]);\n            parent.setValue(\"I was processed by test service\");\n            return parent;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```\nResultController:\n```\n@Controller\n@RequestMapping(\"/inherited\")\npublic class ResultController {\n\n    @Resource\n    private ChildClass childClass;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView printWelcome() {\n        ModelAndView modelAndView = new ModelAndView(\"hello\");\n        modelAndView.addObject(\"message\", childClass.play());\n        return modelAndView;\n    }\n}\n```\n\n我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。\n\n之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：\nParentClass:\n```\n@Service\npublic class TestService {\n    \n    @Resource\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent.setValue(\"I was processed by test service\");\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n}\n```\n此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。\n<code>＠Resource</code>部分注解：\n```\n * Even though this annotation is not marked Inherited, deployment\n * tools are required to examine all superclasses of any component\n * class to discover all uses of this annotation in all superclasses.\n * All such annotation instances specify resources that are needed\n * by the application component.  Note that this annotation may\n * appear on private fields and methods of superclasses; the container\n * is required to perform injection in these cases as well.\n```\n","slug":"Spring-circular-dependency","published":1,"updated":"2016-02-03T06:17:20.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cik7y1o4400001lamg3x7lr5d"},{"title":"@transactional","date":"2015-11-08T03:36:44.000Z","_content":"在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。\n在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。\n同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。\n之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。\n如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：\n```\n@Service(\"transactionalTestClass\")\npublic class TransactionalTestClass {\n    \n    @Resource(\"transactionalTestClass\")\n    private TransactionalTestClass transactionalTestClass;\n    \n    public void noTransactionalMethod(){\n        transactionalTestClass.transactionalMethod();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transactionalMethod() {\n        //do somthing\n    }\n}\n```","source":"_posts/transactional.md","raw":"title: '@transactional'\ndate: 2015-11-08 11:36:44\ntags: [transactional, spring, java]\n---\n在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。\n在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。\n同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。\n之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。\n如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：\n```\n@Service(\"transactionalTestClass\")\npublic class TransactionalTestClass {\n    \n    @Resource(\"transactionalTestClass\")\n    private TransactionalTestClass transactionalTestClass;\n    \n    public void noTransactionalMethod(){\n        transactionalTestClass.transactionalMethod();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transactionalMethod() {\n        //do somthing\n    }\n}\n```","slug":"transactional","published":1,"updated":"2015-11-08T08:19:07.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cik7y1o4t00091lamd9khd520"},{"title":"mount partitions on startup in archlinux","date":"2016-01-17T09:36:47.000Z","_content":"\n机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。\n\n### 第一步，grub rescue的处理\n先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。\n解决办法是：\n1. 列出所有分区\n```\ngrub rescue> ls\n```\n2. 依次ls每个分区直到找到不报'unknown filesystem'的分区，比如n=5\n```\ngrub rescue> ls (hd0,msdos5)/boot/grub\n```\n3. 依次执行以下命令，可进入正常的系统引导界面\n```\ngrub rescue> set root=(hd0,msdos5)/boot/grub\ngrub rescue> set prefix=(hd0,msdos5)/boot/grub\ngrub rescue> insmod normal\ngrub rescue> normal\n```\n4. 进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常\n```\n$ sudo grub-install /dev/sda\n```\n\n### 第二步，archlinux挂载分区\n配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend\n1. 找到要挂载的新分区硬盘号码，比如/dev/sda5\n```\n$ sudo fdisk -l\n```\n2. 格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)\n```\n$ sudo mkfs.ext4 /dev/sda5\n```\n3. 配置新分区在系统启动的时候挂载，并映射为/extend\n修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序\n```\nUUID=59f8ba70-62d4-4d1d-982e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   0 3\n```\n","source":"_posts/mount-partitions-on-startup-in-archlinux.md","raw":"title: mount partitions on startup in archlinux\ndate: 2016-01-17 17:36:47\ntags: [archlinux, mount partitions, grub rescue]\n---\n\n机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。\n\n### 第一步，grub rescue的处理\n先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。\n解决办法是：\n1. 列出所有分区\n```\ngrub rescue> ls\n```\n2. 依次ls每个分区直到找到不报'unknown filesystem'的分区，比如n=5\n```\ngrub rescue> ls (hd0,msdos5)/boot/grub\n```\n3. 依次执行以下命令，可进入正常的系统引导界面\n```\ngrub rescue> set root=(hd0,msdos5)/boot/grub\ngrub rescue> set prefix=(hd0,msdos5)/boot/grub\ngrub rescue> insmod normal\ngrub rescue> normal\n```\n4. 进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常\n```\n$ sudo grub-install /dev/sda\n```\n\n### 第二步，archlinux挂载分区\n配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend\n1. 找到要挂载的新分区硬盘号码，比如/dev/sda5\n```\n$ sudo fdisk -l\n```\n2. 格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)\n```\n$ sudo mkfs.ext4 /dev/sda5\n```\n3. 配置新分区在系统启动的时候挂载，并映射为/extend\n修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序\n```\nUUID=59f8ba70-62d4-4d1d-982e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   0 3\n```\n","slug":"mount-partitions-on-startup-in-archlinux","published":1,"updated":"2016-02-03T06:06:22.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cik7y1o4w000e1lamdsfwr09c"},{"title":"git base commands","date":"2015-09-24T03:52:12.000Z","_content":"### 初始化\n```\n$ mkdir test\n$ cd test\n$ git init\n```\n\n### config\n```\n$ git config --global user.name username\n$ git config --global user.email useremail.chn@gmail.com\n```\n\n### 文件修改 、查看状态、文件添加以及修改提交\n```\n$ echo \"hello world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"first\" //提交第一个版本\n$ echo \"hello new world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"second\" //提交第二个版本\n```\n\n### 版本切换\n查看更新记录\n```\n$ git log\n```\n使用能够区别版本的前几位即可\n```\n$ git checkout commit-id\n```\n\n### 远程提交\n添加远程仓库\n```\n$ git remote add origin https://github.com/windpuller/test.git\n```\n将修改提交到服务器端\n```\n$ git push -u origin master\n```\n\n### 检出仓库\n创建本地仓库的克隆版本\n```\n$ git clone /path/to/repository\n```\n创建远端服务器的克隆版本\n```\n$ git clone uxername@host:/past/to/repository\n```\n\n### 分支\n创建分支\n```\n$ git branch branch1\n```\n切换分支\n```\n$ git checkout branch1\n```\n删除本地分支\n```\n$ git branch -d branch1\n```\n删除远程分支(慎重使用)\n```\n$ git branch -r -d origin/branch1\n$ git push origin :branch1\n```\n将分支推送到远端仓库，不推送的话分支是不为他人所见的\n```\n$ git push origin branch1\n```\n\n\n### 更新与合并\n更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能\n```\n$ git pull\n```\n合并其他分支到当前分支\n```\n$ git merge branch\n```\n在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。\n在合并改动之前，可以使用如下命令预览差异：\n```\n$git diff source_branch target_branch\n```\n\n### 标签\n为某个版本创建标签\n```\n$ git tag tag-name commit-ID\n```\n\n### 替换本地改动\n如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响\n```\n$ git checkout -- filename\n```\n如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：\n```\n$ git fetch origin\n$ git reset --hard origin/master\n```\n\n### 实用小贴士\n内建的图形化git\n```\n$ gitk\n```\n彩色的git输出\n```\n$ git config color.ui true\n```\n显示历史记录时，每个提交的信息只显示一行\n```\n$ git config format.pretty oneline\n```\n交互式添加文件到暂存区\n```\n$ git add -i\n```\n\n### 参考文献：\n1. http://rogerdudler.github.io/git-guide/index.zh.html\n","source":"_posts/git-base-commands.md","raw":"title: git base commands\ndate: 2015-09-24 11:52:12\ntags: git\n---\n### 初始化\n```\n$ mkdir test\n$ cd test\n$ git init\n```\n\n### config\n```\n$ git config --global user.name username\n$ git config --global user.email useremail.chn@gmail.com\n```\n\n### 文件修改 、查看状态、文件添加以及修改提交\n```\n$ echo \"hello world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"first\" //提交第一个版本\n$ echo \"hello new world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"second\" //提交第二个版本\n```\n\n### 版本切换\n查看更新记录\n```\n$ git log\n```\n使用能够区别版本的前几位即可\n```\n$ git checkout commit-id\n```\n\n### 远程提交\n添加远程仓库\n```\n$ git remote add origin https://github.com/windpuller/test.git\n```\n将修改提交到服务器端\n```\n$ git push -u origin master\n```\n\n### 检出仓库\n创建本地仓库的克隆版本\n```\n$ git clone /path/to/repository\n```\n创建远端服务器的克隆版本\n```\n$ git clone uxername@host:/past/to/repository\n```\n\n### 分支\n创建分支\n```\n$ git branch branch1\n```\n切换分支\n```\n$ git checkout branch1\n```\n删除本地分支\n```\n$ git branch -d branch1\n```\n删除远程分支(慎重使用)\n```\n$ git branch -r -d origin/branch1\n$ git push origin :branch1\n```\n将分支推送到远端仓库，不推送的话分支是不为他人所见的\n```\n$ git push origin branch1\n```\n\n\n### 更新与合并\n更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能\n```\n$ git pull\n```\n合并其他分支到当前分支\n```\n$ git merge branch\n```\n在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。\n在合并改动之前，可以使用如下命令预览差异：\n```\n$git diff source_branch target_branch\n```\n\n### 标签\n为某个版本创建标签\n```\n$ git tag tag-name commit-ID\n```\n\n### 替换本地改动\n如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响\n```\n$ git checkout -- filename\n```\n如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：\n```\n$ git fetch origin\n$ git reset --hard origin/master\n```\n\n### 实用小贴士\n内建的图形化git\n```\n$ gitk\n```\n彩色的git输出\n```\n$ git config color.ui true\n```\n显示历史记录时，每个提交的信息只显示一行\n```\n$ git config format.pretty oneline\n```\n交互式添加文件到暂存区\n```\n$ git add -i\n```\n\n### 参考文献：\n1. http://rogerdudler.github.io/git-guide/index.zh.html\n","slug":"git-base-commands","published":1,"updated":"2016-02-03T06:57:59.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cik7y1o50000l1lamufal1dd1"},{"title":"csrf defense","date":"2015-11-22T06:39:32.000Z","_content":"*本文仅用来自己备忘，更详细内容请[阅读原文](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)。*\n\n## 防止csrf攻击的常用方法\n### 1. HTTP Reference\n**原理**：检查HTTP Reference的地址，判定请求的来源。\n**缺点**：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。\n\n### 2. url中添加token参数\n**原理**：检查请求url中的token值是否是合法的。\n**缺点**：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。\n\n### 3. HTTP协议头部添加自定义属性\n**原理**：检查HTTP头部的csrfToken字段值是否合法。\n**缺点**：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。\n\n### 推荐的防御方式\n2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。\n","source":"_posts/csrf-defense.md","raw":"title: csrf defense\ndate: 2015-11-22 14:39:32\ntags: csrf\n---\n*本文仅用来自己备忘，更详细内容请[阅读原文](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)。*\n\n## 防止csrf攻击的常用方法\n### 1. HTTP Reference\n**原理**：检查HTTP Reference的地址，判定请求的来源。\n**缺点**：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。\n\n### 2. url中添加token参数\n**原理**：检查请求url中的token值是否是合法的。\n**缺点**：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。\n\n### 3. HTTP协议头部添加自定义属性\n**原理**：检查HTTP头部的csrfToken字段值是否合法。\n**缺点**：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。\n\n### 推荐的防御方式\n2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。\n","slug":"csrf-defense","published":1,"updated":"2016-02-03T06:11:58.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cik7y1o52000o1lamg13csies"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cik7y1o4400001lamg3x7lr5d","tag_id":"cik7y1o4a00011lam3un6q1x5","_id":"cik7y1o4d00051lam3yejum1j"},{"post_id":"cik7y1o4400001lamg3x7lr5d","tag_id":"cik7y1o4c00021lam35egz763","_id":"cik7y1o4e00061lam1pihdnjw"},{"post_id":"cik7y1o4400001lamg3x7lr5d","tag_id":"cik7y1o4c00031lamhyz19utn","_id":"cik7y1o4e00071lamgircqe3y"},{"post_id":"cik7y1o4400001lamg3x7lr5d","tag_id":"cik7y1o4d00041lamsoli54tr","_id":"cik7y1o4f00081lam7x1u666c"},{"post_id":"cik7y1o4t00091lamd9khd520","tag_id":"cik7y1o4u000a1lamuj5mot49","_id":"cik7y1o4v000b1lamrait9y97"},{"post_id":"cik7y1o4t00091lamd9khd520","tag_id":"cik7y1o4c00021lam35egz763","_id":"cik7y1o4v000c1lamdu1w97j2"},{"post_id":"cik7y1o4t00091lamd9khd520","tag_id":"cik7y1o4c00031lamhyz19utn","_id":"cik7y1o4v000d1lamb61ok63c"},{"post_id":"cik7y1o4w000e1lamdsfwr09c","tag_id":"cik7y1o4x000f1lamhc1grvyp","_id":"cik7y1o4y000i1lammzo3oynh"},{"post_id":"cik7y1o4w000e1lamdsfwr09c","tag_id":"cik7y1o4x000g1lamgotyfx7f","_id":"cik7y1o4y000j1lamhp2ui4v3"},{"post_id":"cik7y1o4w000e1lamdsfwr09c","tag_id":"cik7y1o4y000h1lamu6vca5sl","_id":"cik7y1o4y000k1lamy5s5cxqe"},{"post_id":"cik7y1o50000l1lamufal1dd1","tag_id":"cik7y1o51000m1lam6h92qkek","_id":"cik7y1o51000n1lamt3dljxa5"},{"post_id":"cik7y1o52000o1lamg13csies","tag_id":"cik7y1o53000p1lamx2gy4yqt","_id":"cik7y1o53000q1lam9kv3g44h"}],"Tag":[{"name":"circular dependency","_id":"cik7y1o4a00011lam3un6q1x5"},{"name":"spring","_id":"cik7y1o4c00021lam35egz763"},{"name":"java","_id":"cik7y1o4c00031lamhyz19utn"},{"name":"inherited","_id":"cik7y1o4d00041lamsoli54tr"},{"name":"transactional","_id":"cik7y1o4u000a1lamuj5mot49"},{"name":"archlinux","_id":"cik7y1o4x000f1lamhc1grvyp"},{"name":"mount partitions","_id":"cik7y1o4x000g1lamgotyfx7f"},{"name":"grub rescue","_id":"cik7y1o4y000h1lamu6vca5sl"},{"name":"git","_id":"cik7y1o51000m1lam6h92qkek"},{"name":"csrf","_id":"cik7y1o53000p1lamx2gy4yqt"}]}}