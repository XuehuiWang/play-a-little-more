{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/light/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1454478356981},{"_id":"themes/light/README.md","hash":"aa189c7ff03c60d8fceb009f5fca1a61d8a0ecdf","modified":1454478356981},{"_id":"themes/light/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1454478356981},{"_id":"themes/light/_config.yml","hash":"54873f9af5e1d1c802fcd7c642c4187f1f04e6b9","modified":1454483626831},{"_id":"source/_drafts/install-archlinux-from-hard-disk.md","hash":"93de1876d33c11aa712863b5f80ccc4d0ebb9b5a","modified":1456653119320},{"_id":"source/_drafts/java-profiling-tools.md","hash":"8e7b9816e9a4007fe7c1b57b71d6ab9f4dbc1ac1","modified":1461575518345},{"_id":"source/_posts/RESTful-note.md","hash":"0fa1b3fcc4fa8bdbbc54827d74d230f9df571ba4","modified":1463480782369},{"_id":"source/_posts/Spring-circular-dependency.md","hash":"4b6f03f631de3db0518aefebb658c489b5acc853","modified":1454480240978},{"_id":"source/_posts/csrf-defense.md","hash":"0efd27818fcddd1214c5453fa7a51278f5f84550","modified":1454479918708},{"_id":"source/_posts/deserialize-numeric-string-for-map-key-in-json.md","hash":"f78baaf241d0213b7d4e94eb8091e665b73cb71c","modified":1457617068364},{"_id":"source/_posts/git-base-commands.md","hash":"86497d89baeec9e0f2c151f174e4307aecb3989c","modified":1454482679528},{"_id":"source/_posts/mount-partitions-on-startup-in-archlinux.md","hash":"87a5bb22b6d7309caacbae32e6c80bab0989948d","modified":1454479582171},{"_id":"source/_posts/transactional.md","hash":"5988525cdc33f61ef2a66230a03f9114cd95a60e","modified":1446970747594},{"_id":"themes/light/.git/FETCH_HEAD","hash":"73f04a82d42e316929a21b414e7c87346b5a2818","modified":1461575410508},{"_id":"themes/light/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1454478356981},{"_id":"themes/light/.git/ORIG_HEAD","hash":"45a7fa70adc64142b0d3ee196d6b4228cead954a","modified":1461575410515},{"_id":"themes/light/.git/config","hash":"f3ab32afa3b014774d7b3b4af03f4abc20736f2c","modified":1454478356981},{"_id":"themes/light/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1454478356981},{"_id":"themes/light/.git/index","hash":"b7a0035d0fc41d9fbefc9d6fddac10de4b4b595c","modified":1461575415668},{"_id":"themes/light/.git/packed-refs","hash":"3acf93ed668b9d50e46a50c37ebd43c50d6ab973","modified":1454478356981},{"_id":"themes/light/languages/de.yml","hash":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1454478356984},{"_id":"themes/light/languages/default.yml","hash":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1454478356984},{"_id":"themes/light/languages/es.yml","hash":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1454478356984},{"_id":"themes/light/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1454478356984},{"_id":"themes/light/languages/pl.yml","hash":"3f36d08e84a85651bf777cec0752193057c08430","modified":1454478356984},{"_id":"themes/light/languages/ru.yml","hash":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1454478356984},{"_id":"themes/light/languages/zh-CN.yml","hash":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1454478356984},{"_id":"themes/light/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1454478356984},{"_id":"themes/light/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1454478356984},{"_id":"themes/light/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1454478356984},{"_id":"themes/light/layout/index.ejs","hash":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1454478356984},{"_id":"themes/light/layout/layout.ejs","hash":"8c1526f377aec01cf43be017834a3683d21b2ea9","modified":1461575410515},{"_id":"themes/light/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1454478356984},{"_id":"themes/light/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1454478356984},{"_id":"themes/light/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1454478356984},{"_id":"source/_posts/deserialize-numeric-string-for-map-key-in-json/image01.png","hash":"f83dfa4ff9517d0d60b4d2b21b65f14849af27a9","modified":1456667543006},{"_id":"themes/light/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1454478356984},{"_id":"themes/light/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1454478356984},{"_id":"themes/light/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1454478356984},{"_id":"themes/light/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1454478356984},{"_id":"themes/light/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1454478356984},{"_id":"themes/light/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1454478356984},{"_id":"themes/light/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1454478356984},{"_id":"themes/light/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1454478356984},{"_id":"themes/light/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1454478356984},{"_id":"themes/light/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1454478356984},{"_id":"themes/light/.git/logs/HEAD","hash":"483dd3c5f116585dff208117a44ed07cba14a2b8","modified":1461575410515},{"_id":"themes/light/layout/_partial/after_footer.ejs","hash":"be0905e9fb3730d63685b5db579875538a92de95","modified":1454478356984},{"_id":"themes/light/layout/_partial/archive.ejs","hash":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1454478356984},{"_id":"themes/light/layout/_partial/article.ejs","hash":"508fb3aaac2b68e6f24bd5259a0684e23f46fe37","modified":1454478356984},{"_id":"themes/light/layout/_partial/comment.ejs","hash":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1454478356984},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","hash":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1454478356984},{"_id":"themes/light/layout/_partial/footer.ejs","hash":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1454478356984},{"_id":"themes/light/layout/_partial/google_analytics.ejs","hash":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1454478356984},{"_id":"themes/light/layout/_partial/head.ejs","hash":"5e110e4b0a2a896a073dfc7739220025b02a4077","modified":1454478356984},{"_id":"themes/light/layout/_partial/header.ejs","hash":"224ea7f0fccc29418583a5c59497a8ece0073301","modified":1454478356984},{"_id":"themes/light/layout/_partial/pagination.ejs","hash":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1454478356984},{"_id":"themes/light/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1454478356984},{"_id":"themes/light/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1454478356984},{"_id":"themes/light/layout/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1454478356984},{"_id":"themes/light/layout/_widget/search.ejs","hash":"55c707f3aa7453c305c41898ad22556edd213830","modified":1454478356984},{"_id":"themes/light/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1454478356984},{"_id":"themes/light/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1454478356984},{"_id":"themes/light/source/css/style.styl","hash":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1454478356984},{"_id":"themes/light/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1454478356984},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1454478356984},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1454478356984},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1454478356984},{"_id":"themes/light/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1454478356984},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1454478356984},{"_id":"themes/light/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1454478356984},{"_id":"themes/light/.git/objects/4b/487af88fea3bf5a2cbdb0b830dcc119e9ee5d3","hash":"c828121fec38e7e4a65cc7c70921d153ed4f9833","modified":1461575410295},{"_id":"themes/light/.git/objects/56/10c0b6033e7270768d18f3d56d92924f247a57","hash":"a727006266dcef3b565f8966faabf14726b76549","modified":1461575410295},{"_id":"themes/light/.git/objects/5b/d85a88f82fa303f74071d8c30cf3626885d3ce","hash":"2b2dc06f0b84bebc00548740c35311ae17981482","modified":1461575410295},{"_id":"themes/light/.git/objects/60/0eae23a168c9da97382741ce258c0270d4a49d","hash":"723f7474562d46e576508abfb5c36da18c62ec0f","modified":1461575410295},{"_id":"themes/light/.git/objects/97/bf458444c32287e9d37a556f6b9ca1701d904c","hash":"5470c0765d722256016dd737843acab9a9f230ae","modified":1461575410295},{"_id":"themes/light/.git/objects/cb/f8e511f2062e2d92a7fff76d11df37746b601e","hash":"c4bdc9711bc3f88f75afc5ffc88896e786dac314","modified":1461575410295},{"_id":"themes/light/.git/objects/cf/a1b0ad5acebecf56ffa990de7caf604efc81f1","hash":"59bfe3573ecb63931c6f666f113906df60719be4","modified":1461575410295},{"_id":"themes/light/.git/objects/d7/fe9520dee25d3672119b991a11ae54876e5ce4","hash":"2b49799d2fa246da7f648c3788121b1a36c9a7a5","modified":1461575410295},{"_id":"themes/light/.git/objects/e0/aface62075a60c1fd40669855e23f5091b8862","hash":"fd6ffad5959e532eaa9e8691eedbd5c7508ce98f","modified":1461575410295},{"_id":"themes/light/.git/objects/e2/0758a50344556db66efb505ade8cab4a238199","hash":"21df4b488411777c5c07564098542b1eb159ee65","modified":1461575410295},{"_id":"themes/light/.git/objects/eb/b8a1b61eff095dac97fda154afe41df6595a92","hash":"72bf4807017985f1f3129f411dbf5d99526b7df9","modified":1461575410295},{"_id":"themes/light/.git/objects/pack/pack-1f6d69ddb1f0687517f4addcf7b11338d4f6d367.idx","hash":"82145758a7e0aa9383aa0a87520b030a03725c1d","modified":1454478356984},{"_id":"themes/light/.git/refs/heads/master","hash":"f9a76d9def2c9a2089dae162b8641cb24dabce63","modified":1461575410515},{"_id":"themes/light/layout/_partial/post/category.ejs","hash":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/tag.ejs","hash":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1454478356984},{"_id":"themes/light/layout/_partial/post/title.ejs","hash":"d7fbc575d35ae68f9045a382c651450e4131f335","modified":1454478356984},{"_id":"themes/light/source/css/_base/layout.styl","hash":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1454478356984},{"_id":"themes/light/source/css/_base/variable.styl","hash":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1454478356984},{"_id":"themes/light/source/css/_partial/archive.styl","hash":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1454478356984},{"_id":"themes/light/source/css/_partial/article.styl","hash":"3750f8cb4208941864247224f1dc7a256992ba8b","modified":1454478356984},{"_id":"themes/light/source/css/_partial/comment.styl","hash":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1454478356984},{"_id":"themes/light/source/css/_partial/footer.styl","hash":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1454478356984},{"_id":"themes/light/source/css/_partial/header.styl","hash":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1454478356984},{"_id":"themes/light/source/css/_partial/index.styl","hash":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1454478356984},{"_id":"themes/light/source/css/_partial/sidebar.styl","hash":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1454478356984},{"_id":"themes/light/source/css/_partial/syntax.styl","hash":"400335f01229ed02e62110ba90312adb78b84ff5","modified":1461575410515},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1454478356984},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1454478356984},{"_id":"themes/light/.git/logs/refs/heads/master","hash":"483dd3c5f116585dff208117a44ed07cba14a2b8","modified":1461575410515},{"_id":"themes/light/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1454478356981},{"_id":"themes/light/.git/refs/remotes/origin/master","hash":"f9a76d9def2c9a2089dae162b8641cb24dabce63","modified":1461575410508},{"_id":"themes/light/.git/logs/refs/remotes/origin/HEAD","hash":"197864a846ded200837d150653bc222903f3dd23","modified":1454478356984},{"_id":"themes/light/.git/logs/refs/remotes/origin/master","hash":"598fc09d332bc10abd8f7800972929424c760fb3","modified":1461575410508},{"_id":"themes/light/.git/objects/pack/pack-1f6d69ddb1f0687517f4addcf7b11338d4f6d367.pack","hash":"b0ec7720d8adbeef45bdb3616c896a858d676e42","modified":1454478356984},{"_id":"public/atom.xml","hash":"f8a89dee5cff148d6672ab4353a613aac532ac2b","modified":1463480873808},{"_id":"public/sitemap.xml","hash":"577dee3e824acde6352f0e36b2e1f36d22e0881a","modified":1463480873827},{"_id":"public/2016/01/17/mount-partitions-on-startup-in-archlinux/index.html","hash":"e329c874dd198273d45dd3b0463962e1f228a908","modified":1463480113741},{"_id":"public/2015/11/22/csrf-defense/index.html","hash":"e014994a40466dc92a32cd2e3d24797032838070","modified":1463480113749},{"_id":"public/2015/11/08/transactional/index.html","hash":"b98745d34addad76c545e129cb7c4e30f4616a2a","modified":1463480113749},{"_id":"public/archives/index.html","hash":"b401757af3b7fb5eb18fe762544ffc4e1d518277","modified":1463480113750},{"_id":"public/archives/2015/index.html","hash":"389b32512780137136496d6b2a4a1926d7abf748","modified":1463480113750},{"_id":"public/archives/2015/09/index.html","hash":"5a55998fbc6cdf77e3f1b60ab9ffd74775692ed7","modified":1463480113750},{"_id":"public/archives/2015/10/index.html","hash":"81a4367f5e2b4690a56f6f056c35f43d91bf4148","modified":1463480113750},{"_id":"public/archives/2015/11/index.html","hash":"a40892ff24cd84d2666dfc34e266343d79fe507f","modified":1463480113750},{"_id":"public/archives/2016/index.html","hash":"ac21f05bf4cf9576426f648601c1d8b0ddaa1f27","modified":1463480113750},{"_id":"public/archives/2016/01/index.html","hash":"17d7665ccf2f34b97cba442187920ce63c170bea","modified":1463480113750},{"_id":"public/archives/2016/02/index.html","hash":"475f24989fae200b2f3a487807c7b7de146f88fe","modified":1463480113750},{"_id":"public/tags/archlinux/index.html","hash":"72a12554a7379a3b0d1c0e0f7f4bf71d56781ce2","modified":1463480113750},{"_id":"public/tags/circular-dependency/index.html","hash":"8d3ba01fc42efb44428642282e3f7c1ec9327799","modified":1463480113750},{"_id":"public/tags/spring/index.html","hash":"ac99347ca35ce399e89ff03532557460561b5083","modified":1463480113750},{"_id":"public/tags/java/index.html","hash":"4ced8447ebe0edb796c6a7e98f5a123eb2e873a9","modified":1463480113750},{"_id":"public/tags/inherited/index.html","hash":"8c9bf664147f7f790fcf61bd11d0fc8d52edb89b","modified":1463480113750},{"_id":"public/tags/csrf/index.html","hash":"6ef2b7772c831bba3f7f2b3d70760ed9a1740fcb","modified":1463480113750},{"_id":"public/tags/jackson/index.html","hash":"e51c8fa6666bd7b1bc124e05ca670b72ac5f9541","modified":1463480113751},{"_id":"public/tags/deserialization/index.html","hash":"4fc21aafa242fc92053ec3a66c519d77e132e1e9","modified":1463480113751},{"_id":"public/tags/git/index.html","hash":"4ffb2113ed3e4e9abd9bc1b7e33a6d0af1e7e8a4","modified":1463480113751},{"_id":"public/tags/mount-partitions/index.html","hash":"bd8aee9e399b89dc8e61ea14ddfe14217503ed29","modified":1463480113751},{"_id":"public/tags/grub-rescue/index.html","hash":"edcf6372792bb39941f7c4d0eefce7da80a05f23","modified":1463480113751},{"_id":"public/tags/transactional/index.html","hash":"91c3077b913522d41752eb56bed7f577acdbf37f","modified":1463480113751},{"_id":"public/2016/02/28/deserialize-numeric-string-for-map-key-in-json/index.html","hash":"441055a18b1af943f19e9977cbd4ddfb842ac202","modified":1463480113751},{"_id":"public/2015/10/25/Spring-circular-dependency/index.html","hash":"9daa9a2d8bdc4c8e71a8b5a5a28948b8cb83e9a1","modified":1463480113751},{"_id":"public/2015/09/24/git-base-commands/index.html","hash":"839d03721487e294ad1cd64e21fe9449bbb2d82a","modified":1463480113751},{"_id":"public/index.html","hash":"34e2be5b2a3b8571be164e35c576e0bf1f7dd368","modified":1463480873992},{"_id":"public/2016/05/17/RESTful-note/index.html","hash":"0b206868588faadd199bc243d04735d78d879960","modified":1463480873992},{"_id":"public/archives/2016/05/index.html","hash":"2a1645681d4a3867fec0bdab1a2f6a00d8bea675","modified":1463480113754},{"_id":"public/tags/restful/index.html","hash":"19cb7982789f7cc5f091f200ec5b38d95eae1463","modified":1463480113754},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463480113756},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463480113756},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463480113757},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463480113757},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463480113757},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463480113757},{"_id":"public/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1463480113757},{"_id":"public/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1463480113757},{"_id":"public/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png","hash":"f83dfa4ff9517d0d60b4d2b21b65f14849af27a9","modified":1463480113757},{"_id":"public/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1463480114354},{"_id":"public/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1463480114355},{"_id":"public/css/style.css","hash":"1b315ace7ce90e25d76b69b6754d663d7ad5ff3a","modified":1463480114358},{"_id":"public/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1463480114358},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1463480114358},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1463480114358},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1463480114358}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"install archlinux from hard disk","_content":"1. 准备工作\n从官方[下载地址](https://www.archlinux.org/download/)选择比较近的源下载最新的镜像文件。这里选择哈工大的[下载源](http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso).把镜像文件中的**VMLINUZ**、**ARCHISO.IMG**放到windows的系统盘根目录下.\n下载引导**wingrub**或者**EasyBCD**，安装之后将menu.lst中的内容更换如下：\n```\ntimeout 5\ndefault 0\n\ntitle  Install Arch Linux\nroot  (hd0,0)\nkernel /vmlinuz archisolabel=ARCH_201602\ninitrd /archiso.img\n```\n","source":"_drafts/install-archlinux-from-hard-disk.md","raw":"title: install archlinux from hard disk\ntags: archlinux\n---\n1. 准备工作\n从官方[下载地址](https://www.archlinux.org/download/)选择比较近的源下载最新的镜像文件。这里选择哈工大的[下载源](http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso).把镜像文件中的**VMLINUZ**、**ARCHISO.IMG**放到windows的系统盘根目录下.\n下载引导**wingrub**或者**EasyBCD**，安装之后将menu.lst中的内容更换如下：\n```\ntimeout 5\ndefault 0\n\ntitle  Install Arch Linux\nroot  (hd0,0)\nkernel /vmlinuz archisolabel=ARCH_201602\ninitrd /archiso.img\n```\n","slug":"install-archlinux-from-hard-disk","published":0,"date":"2016-02-28T09:51:59.320Z","updated":"2016-02-28T09:51:59.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tom00003uamril2l8hg","content":"<ol>\n<li>准备工作<br>从官方<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"external\">下载地址</a>选择比较近的源下载最新的镜像文件。这里选择哈工大的<a href=\"http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso\" target=\"_blank\" rel=\"external\">下载源</a>.把镜像文件中的<strong>VMLINUZ</strong>、<strong>ARCHISO.IMG</strong>放到windows的系统盘根目录下.<br>下载引导<strong>wingrub</strong>或者<strong>EasyBCD</strong>，安装之后将menu.lst中的内容更换如下：<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">title  Install Arch Linux</span><br><span class=\"line\"><span class=\"title\">root</span>  (<span class=\"params\">hd0,<span class=\"number\">0</span></span>)</span><br><span class=\"line\">kernel /vmlinuz archisolabel</span>=ARCH_201602</span><br><span class=\"line\">initrd /archiso.img</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>准备工作<br>从官方<a href=\"https://www.archlinux.org/download/\">下载地址</a>选择比较近的源下载最新的镜像文件。这里选择哈工大的<a href=\"http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso\">下载源</a>.把镜像文件中的<strong>VMLINUZ</strong>、<strong>ARCHISO.IMG</strong>放到windows的系统盘根目录下.<br>下载引导<strong>wingrub</strong>或者<strong>EasyBCD</strong>，安装之后将menu.lst中的内容更换如下：<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">title  Install Arch Linux</span><br><span class=\"line\"><span class=\"title\">root</span>  (<span class=\"params\">hd0,<span class=\"number\">0</span></span>)</span><br><span class=\"line\">kernel /vmlinuz archisolabel</span>=ARCH_201602</span><br><span class=\"line\">initrd /archiso.img</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"java-profiling-tools","_content":"","source":"_drafts/java-profiling-tools.md","raw":"title: java-profiling-tools\ntags:\n---\n","slug":"java-profiling-tools","published":0,"date":"2016-04-25T09:11:58.345Z","updated":"2016-04-25T09:11:58.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tot00013uamzhc0ydcu","content":"","excerpt":"","more":""},{"title":"RESTful note","date":"2016-05-17T10:14:51.000Z","_content":"\n## 1. RESTful\nRESTful，即Representational State Transfer的缩写，字面含义是**表现层状态转化**。是某歪果仁博士提出的一种**网络应用软件架构**风格。  \n根据[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful.html)的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。\n(1) 资源\n表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。\n(2) 表现层\n资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。\n(3) 状态转化\nclient通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。\n## 2. 优势\nRESTful的优势主要体现在与传统C/S架构应用软件的对比上：\n浏览器即客户端，客户端的开发难度和成本降低\n仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源\n系统更新升级方便，向后兼容性好","source":"_posts/RESTful-note.md","raw":"title: RESTful note\ntags: restful\ndate: 2016-05-17 18:14:51\n---\n\n## 1. RESTful\nRESTful，即Representational State Transfer的缩写，字面含义是**表现层状态转化**。是某歪果仁博士提出的一种**网络应用软件架构**风格。  \n根据[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful.html)的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。\n(1) 资源\n表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。\n(2) 表现层\n资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。\n(3) 状态转化\nclient通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。\n## 2. 优势\nRESTful的优势主要体现在与传统C/S架构应用软件的对比上：\n浏览器即客户端，客户端的开发难度和成本降低\n仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源\n系统更新升级方便，向后兼容性好","slug":"RESTful-note","published":1,"updated":"2016-05-17T10:26:22.369Z","_id":"cioba9toy00033uamxxztds2w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-RESTful\"><a href=\"#1-RESTful\" class=\"headerlink\" title=\"1. RESTful\"></a>1. RESTful</h2><p>RESTful，即Representational State Transfer的缩写，字面含义是<strong>表现层状态转化</strong>。是某歪果仁博士提出的一种<strong>网络应用软件架构</strong>风格。<br>根据<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"external\">理解RESTful架构</a>的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。<br>(1) 资源<br>表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。<br>(2) 表现层<br>资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。<br>(3) 状态转化<br>client通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。</p>\n<h2 id=\"2-优势\"><a href=\"#2-优势\" class=\"headerlink\" title=\"2. 优势\"></a>2. 优势</h2><p>RESTful的优势主要体现在与传统C/S架构应用软件的对比上：<br>浏览器即客户端，客户端的开发难度和成本降低<br>仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源<br>系统更新升级方便，向后兼容性好</p>\n","excerpt":"","more":"<h2 id=\"1-RESTful\"><a href=\"#1-RESTful\" class=\"headerlink\" title=\"1. RESTful\"></a>1. RESTful</h2><p>RESTful，即Representational State Transfer的缩写，字面含义是<strong>表现层状态转化</strong>。是某歪果仁博士提出的一种<strong>网络应用软件架构</strong>风格。<br>根据<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\">理解RESTful架构</a>的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。<br>(1) 资源<br>表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。<br>(2) 表现层<br>资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。<br>(3) 状态转化<br>client通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。</p>\n<h2 id=\"2-优势\"><a href=\"#2-优势\" class=\"headerlink\" title=\"2. 优势\"></a>2. 优势</h2><p>RESTful的优势主要体现在与传统C/S架构应用软件的对比上：<br>浏览器即客户端，客户端的开发难度和成本降低<br>仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源<br>系统更新升级方便，向后兼容性好</p>\n"},{"title":"Spring circular dependency","date":"2015-10-25T06:11:22.000Z","_content":"最近踩了一个继承加循环依赖的坑，抽象出的代码如下：\nChildClass:\n```\n@Service\npublic class ChildClass extends ParentClass {\n\n    @Resource\n    private TestService testService;\n\n    public String play() {\n        return testService.getParent().play();\n    }\n}\n```\nParentClass:\n```\npublic class ParentClass {\n\n    private String value = \"I am parent class\";\n\n    public String play() {\n        return value;\n    }\n\n    public void setValue(String str) {\n        this.value = str;\n    }\n}\n```\nTestService:\n```\n@Service\npublic class TestService {\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent = create();\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public ParentClass create() {\n        try {\n            Class classDefinition = Class.forName(\"com.springapp.mvc.inherited.ChildClass\");\n            ParentClass parent = (ParentClass) classDefinition.getConstructor(new Class[0]).newInstance(new Object[0]);\n            parent.setValue(\"I was processed by test service\");\n            return parent;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```\nResultController:\n```\n@Controller\n@RequestMapping(\"/inherited\")\npublic class ResultController {\n\n    @Resource\n    private ChildClass childClass;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView printWelcome() {\n        ModelAndView modelAndView = new ModelAndView(\"hello\");\n        modelAndView.addObject(\"message\", childClass.play());\n        return modelAndView;\n    }\n}\n```\n\n我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。\n\n之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：\nParentClass:\n```\n@Service\npublic class TestService {\n    \n    @Resource\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent.setValue(\"I was processed by test service\");\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n}\n```\n此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。\n<code>＠Resource</code>部分注解：\n```\n * Even though this annotation is not marked Inherited, deployment\n * tools are required to examine all superclasses of any component\n * class to discover all uses of this annotation in all superclasses.\n * All such annotation instances specify resources that are needed\n * by the application component.  Note that this annotation may\n * appear on private fields and methods of superclasses; the container\n * is required to perform injection in these cases as well.\n```\n","source":"_posts/Spring-circular-dependency.md","raw":"title: Spring circular dependency\ndate: 2015-10-25 14:11:22\ntags: [circular dependency, spring, java, inherited]\n---\n最近踩了一个继承加循环依赖的坑，抽象出的代码如下：\nChildClass:\n```\n@Service\npublic class ChildClass extends ParentClass {\n\n    @Resource\n    private TestService testService;\n\n    public String play() {\n        return testService.getParent().play();\n    }\n}\n```\nParentClass:\n```\npublic class ParentClass {\n\n    private String value = \"I am parent class\";\n\n    public String play() {\n        return value;\n    }\n\n    public void setValue(String str) {\n        this.value = str;\n    }\n}\n```\nTestService:\n```\n@Service\npublic class TestService {\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent = create();\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public ParentClass create() {\n        try {\n            Class classDefinition = Class.forName(\"com.springapp.mvc.inherited.ChildClass\");\n            ParentClass parent = (ParentClass) classDefinition.getConstructor(new Class[0]).newInstance(new Object[0]);\n            parent.setValue(\"I was processed by test service\");\n            return parent;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```\nResultController:\n```\n@Controller\n@RequestMapping(\"/inherited\")\npublic class ResultController {\n\n    @Resource\n    private ChildClass childClass;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView printWelcome() {\n        ModelAndView modelAndView = new ModelAndView(\"hello\");\n        modelAndView.addObject(\"message\", childClass.play());\n        return modelAndView;\n    }\n}\n```\n\n我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。\n\n之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：\nParentClass:\n```\n@Service\npublic class TestService {\n    \n    @Resource\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent.setValue(\"I was processed by test service\");\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n}\n```\n此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。\n<code>＠Resource</code>部分注解：\n```\n * Even though this annotation is not marked Inherited, deployment\n * tools are required to examine all superclasses of any component\n * class to discover all uses of this annotation in all superclasses.\n * All such annotation instances specify resources that are needed\n * by the application component.  Note that this annotation may\n * appear on private fields and methods of superclasses; the container\n * is required to perform injection in these cases as well.\n```\n","slug":"Spring-circular-dependency","published":1,"updated":"2016-02-03T06:17:20.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tp100043uamk4s5016z","content":"<p>最近踩了一个继承加循环依赖的坑，抽象出的代码如下：<br>ChildClass:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TestService</span> testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">String</span> play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> testService.getParent().play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ParentClass:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"keyword\">value</span> = <span class=\"string\">\"I am parent class\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span>(<span class=\"params\">String str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>TestService:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent = create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class classDefinition = Class.forName(<span class=\"string\">\"com.springapp.mvc.inherited.ChildClass\"</span>);</span><br><span class=\"line\">            ParentClass parent = (ParentClass) classDefinition.getConstructor(<span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]).newInstance(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ResultController:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/inherited\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChildClass childClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">printWelcome</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"message\"</span>, childClass.play());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。</p>\n<p>之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：<br>ParentClass:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。<br><code>＠Resource</code>部分注解：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Even though this annotation <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> marked Inherited, deployment</span><br><span class=\"line\">* tools are required <span class=\"keyword\">to</span> examine all superclasses <span class=\"keyword\">of</span> any component</span><br><span class=\"line\">* <span class=\"built_in\">class</span> <span class=\"keyword\">to</span> discover all uses <span class=\"keyword\">of</span> this annotation <span class=\"keyword\">in</span> all superclasses.</span><br><span class=\"line\">* All such annotation instances specify resources <span class=\"keyword\">that</span> are needed</span><br><span class=\"line\">* <span class=\"keyword\">by</span> <span class=\"keyword\">the</span> <span class=\"built_in\">application</span> component.  Note <span class=\"keyword\">that</span> this annotation may</span><br><span class=\"line\">* appear <span class=\"keyword\">on</span> private fields <span class=\"keyword\">and</span> methods <span class=\"keyword\">of</span> superclasses; <span class=\"keyword\">the</span> container</span><br><span class=\"line\">* <span class=\"keyword\">is</span> required <span class=\"keyword\">to</span> perform injection <span class=\"keyword\">in</span> these cases <span class=\"keyword\">as</span> well.</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>最近踩了一个继承加循环依赖的坑，抽象出的代码如下：<br>ChildClass:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TestService</span> testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">String</span> play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> testService.getParent().play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ParentClass:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"keyword\">value</span> = <span class=\"string\">\"I am parent class\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span>(<span class=\"params\">String str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>TestService:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent = create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class classDefinition = Class.forName(<span class=\"string\">\"com.springapp.mvc.inherited.ChildClass\"</span>);</span><br><span class=\"line\">            ParentClass parent = (ParentClass) classDefinition.getConstructor(<span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]).newInstance(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ResultController:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/inherited\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChildClass childClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">printWelcome</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"message\"</span>, childClass.play());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。</p>\n<p>之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：<br>ParentClass:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。<br><code>＠Resource</code>部分注解：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Even though this annotation <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> marked Inherited, deployment</span><br><span class=\"line\">* tools are required <span class=\"keyword\">to</span> examine all superclasses <span class=\"keyword\">of</span> any component</span><br><span class=\"line\">* <span class=\"built_in\">class</span> <span class=\"keyword\">to</span> discover all uses <span class=\"keyword\">of</span> this annotation <span class=\"keyword\">in</span> all superclasses.</span><br><span class=\"line\">* All such annotation instances specify resources <span class=\"keyword\">that</span> are needed</span><br><span class=\"line\">* <span class=\"keyword\">by</span> <span class=\"keyword\">the</span> <span class=\"built_in\">application</span> component.  Note <span class=\"keyword\">that</span> this annotation may</span><br><span class=\"line\">* appear <span class=\"keyword\">on</span> private fields <span class=\"keyword\">and</span> methods <span class=\"keyword\">of</span> superclasses; <span class=\"keyword\">the</span> container</span><br><span class=\"line\">* <span class=\"keyword\">is</span> required <span class=\"keyword\">to</span> perform injection <span class=\"keyword\">in</span> these cases <span class=\"keyword\">as</span> well.</span><br></pre></td></tr></table></figure></p>\n"},{"title":"csrf defense","date":"2015-11-22T06:39:32.000Z","_content":"*本文仅用来自己备忘，更详细内容请[阅读原文](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)。*\n\n## 防止csrf攻击的常用方法\n### 1. HTTP Reference\n**原理**：检查HTTP Reference的地址，判定请求的来源。\n**缺点**：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。\n\n### 2. url中添加token参数\n**原理**：检查请求url中的token值是否是合法的。\n**缺点**：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。\n\n### 3. HTTP协议头部添加自定义属性\n**原理**：检查HTTP头部的csrfToken字段值是否合法。\n**缺点**：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。\n\n### 推荐的防御方式\n2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。\n","source":"_posts/csrf-defense.md","raw":"title: csrf defense\ndate: 2015-11-22 14:39:32\ntags: csrf\n---\n*本文仅用来自己备忘，更详细内容请[阅读原文](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)。*\n\n## 防止csrf攻击的常用方法\n### 1. HTTP Reference\n**原理**：检查HTTP Reference的地址，判定请求的来源。\n**缺点**：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。\n\n### 2. url中添加token参数\n**原理**：检查请求url中的token值是否是合法的。\n**缺点**：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。\n\n### 3. HTTP协议头部添加自定义属性\n**原理**：检查HTTP头部的csrfToken字段值是否合法。\n**缺点**：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。\n\n### 推荐的防御方式\n2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。\n","slug":"csrf-defense","published":1,"updated":"2016-02-03T06:11:58.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tp200063uamg70a26ub","content":"<p><em>本文仅用来自己备忘，更详细内容请<a href=\"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/\" target=\"_blank\" rel=\"external\">阅读原文</a>。</em></p>\n<h2 id=\"防止csrf攻击的常用方法\"><a href=\"#防止csrf攻击的常用方法\" class=\"headerlink\" title=\"防止csrf攻击的常用方法\"></a>防止csrf攻击的常用方法</h2><h3 id=\"1-HTTP-Reference\"><a href=\"#1-HTTP-Reference\" class=\"headerlink\" title=\"1. HTTP Reference\"></a>1. HTTP Reference</h3><p><strong>原理</strong>：检查HTTP Reference的地址，判定请求的来源。<br><strong>缺点</strong>：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。</p>\n<h3 id=\"2-url中添加token参数\"><a href=\"#2-url中添加token参数\" class=\"headerlink\" title=\"2. url中添加token参数\"></a>2. url中添加token参数</h3><p><strong>原理</strong>：检查请求url中的token值是否是合法的。<br><strong>缺点</strong>：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。</p>\n<h3 id=\"3-HTTP协议头部添加自定义属性\"><a href=\"#3-HTTP协议头部添加自定义属性\" class=\"headerlink\" title=\"3. HTTP协议头部添加自定义属性\"></a>3. HTTP协议头部添加自定义属性</h3><p><strong>原理</strong>：检查HTTP头部的csrfToken字段值是否合法。<br><strong>缺点</strong>：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。</p>\n<h3 id=\"推荐的防御方式\"><a href=\"#推荐的防御方式\" class=\"headerlink\" title=\"推荐的防御方式\"></a>推荐的防御方式</h3><p>2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。</p>\n","excerpt":"","more":"<p><em>本文仅用来自己备忘，更详细内容请<a href=\"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/\">阅读原文</a>。</em></p>\n<h2 id=\"防止csrf攻击的常用方法\"><a href=\"#防止csrf攻击的常用方法\" class=\"headerlink\" title=\"防止csrf攻击的常用方法\"></a>防止csrf攻击的常用方法</h2><h3 id=\"1-HTTP-Reference\"><a href=\"#1-HTTP-Reference\" class=\"headerlink\" title=\"1. HTTP Reference\"></a>1. HTTP Reference</h3><p><strong>原理</strong>：检查HTTP Reference的地址，判定请求的来源。<br><strong>缺点</strong>：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。</p>\n<h3 id=\"2-url中添加token参数\"><a href=\"#2-url中添加token参数\" class=\"headerlink\" title=\"2. url中添加token参数\"></a>2. url中添加token参数</h3><p><strong>原理</strong>：检查请求url中的token值是否是合法的。<br><strong>缺点</strong>：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。</p>\n<h3 id=\"3-HTTP协议头部添加自定义属性\"><a href=\"#3-HTTP协议头部添加自定义属性\" class=\"headerlink\" title=\"3. HTTP协议头部添加自定义属性\"></a>3. HTTP协议头部添加自定义属性</h3><p><strong>原理</strong>：检查HTTP头部的csrfToken字段值是否合法。<br><strong>缺点</strong>：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。</p>\n<h3 id=\"推荐的防御方式\"><a href=\"#推荐的防御方式\" class=\"headerlink\" title=\"推荐的防御方式\"></a>推荐的防御方式</h3><p>2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。</p>\n"},{"title":"deserialize numeric string for map key in json","date":"2016-02-28T14:21:00.000Z","_content":"\n最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:\n```\n{\n  \"data\": {\n    \"1\": \"观景\",\n    \"2\": \"小资\",\n    \"3\": \"院落\"\n  },\n  \"ret\": true,\n  \"errcode\": 0\n}\n```\n然后使用如下代码对其进行反序列化：\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<Integer, String> dataMap = (Map<Integer, String>) retMap.get(\"data\");\n```\n之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：\n```\nboolean existing = dataMap.containsKey(1);\n```\n明明dataMap中存在key=1的键值对，但是得到的结果却是false。\n此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。\n![cast_numeric_string_to_Integer01.png](/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png)\n深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。\n```\nfinal static class StringKD extends StdKeyDeserializer\n{\n    @Override\n    public String _parse(String key, DeserializationContext ctxt) throws JsonMappingException {\n        return key;\n    }\n}    \n```\n修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<String, String> dataMap = (Map<String, String>) retMap.get(\"data\");\nMap<Integer, String> tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());\nfor (Map.Entry<String, String> entry : dataMap.entrySet()) {\n    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());\n}\nboolean existing = tempMap.containsKey(1);\n```\n当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。\n```\npublic class AjaxResult {\n    private boolean ret;\n    private int errcode;\n    private Map<Integer, String> data;\n\n    public boolean isRet() {\n        return ret;\n    }\n\n    public AjaxResult setRet(boolean ret) {\n        this.ret = ret;\n        return this;\n    }\n\n    public int getErrcode() {\n        return errcode;\n    }\n\n    public AjaxResult setErrcode(int errcode) {\n        this.errcode = errcode;\n        return this;\n    }\n\n    public Map<Integer, String> getData() {\n        return data;\n    }\n\n    public AjaxResult setData(Map<Integer, String> data) {\n        this.data = data;\n        return this;\n    }\n}\n```\n\n```\nAjaxResult ajaxResult = objectMapper.readValue(retStr, new TypeReference<AjaxResult>() {});\nMap<Integer, String> ajaxDataMap = ajaxResult.getData();\ndataNodeMap.containsKey(1);\n```\n","source":"_posts/deserialize-numeric-string-for-map-key-in-json.md","raw":"title: deserialize numeric string for map key in json\ntags:\n  - java\n  - jackson\n  - deserialization\ndate: 2016-02-28 22:21:00\n---\n\n最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:\n```\n{\n  \"data\": {\n    \"1\": \"观景\",\n    \"2\": \"小资\",\n    \"3\": \"院落\"\n  },\n  \"ret\": true,\n  \"errcode\": 0\n}\n```\n然后使用如下代码对其进行反序列化：\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<Integer, String> dataMap = (Map<Integer, String>) retMap.get(\"data\");\n```\n之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：\n```\nboolean existing = dataMap.containsKey(1);\n```\n明明dataMap中存在key=1的键值对，但是得到的结果却是false。\n此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。\n![cast_numeric_string_to_Integer01.png](/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png)\n深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。\n```\nfinal static class StringKD extends StdKeyDeserializer\n{\n    @Override\n    public String _parse(String key, DeserializationContext ctxt) throws JsonMappingException {\n        return key;\n    }\n}    \n```\n修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<String, String> dataMap = (Map<String, String>) retMap.get(\"data\");\nMap<Integer, String> tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());\nfor (Map.Entry<String, String> entry : dataMap.entrySet()) {\n    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());\n}\nboolean existing = tempMap.containsKey(1);\n```\n当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。\n```\npublic class AjaxResult {\n    private boolean ret;\n    private int errcode;\n    private Map<Integer, String> data;\n\n    public boolean isRet() {\n        return ret;\n    }\n\n    public AjaxResult setRet(boolean ret) {\n        this.ret = ret;\n        return this;\n    }\n\n    public int getErrcode() {\n        return errcode;\n    }\n\n    public AjaxResult setErrcode(int errcode) {\n        this.errcode = errcode;\n        return this;\n    }\n\n    public Map<Integer, String> getData() {\n        return data;\n    }\n\n    public AjaxResult setData(Map<Integer, String> data) {\n        this.data = data;\n        return this;\n    }\n}\n```\n\n```\nAjaxResult ajaxResult = objectMapper.readValue(retStr, new TypeReference<AjaxResult>() {});\nMap<Integer, String> ajaxDataMap = ajaxResult.getData();\ndataNodeMap.containsKey(1);\n```\n","slug":"deserialize-numeric-string-for-map-key-in-json","published":1,"updated":"2016-03-10T13:37:48.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tp700083uamqoyk309l","content":"<p>最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"1\"</span>: <span class=\"string\">\"观景\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"2\"</span>: <span class=\"string\">\"小资\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"3\"</span>: <span class=\"string\">\"院落\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ret\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"errcode\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后使用如下代码对其进行反序列化：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> retStr = <span class=\"string\">\"&#123;\\\"</span>data\\<span class=\"string\">\":&#123;\\\"</span><span class=\"number\">1</span>\\<span class=\"string\">\":\\\"</span>观景\\<span class=\"string\">\",\\\"</span><span class=\"number\">2</span>\\<span class=\"string\">\":\\\"</span>小资\\<span class=\"string\">\",\\\"</span><span class=\"number\">3</span>\\<span class=\"string\">\":\\\"</span>院落\\<span class=\"string\">\"&#125;,\\\"</span>ret\\<span class=\"string\">\":true,\\\"</span>errcode\\<span class=\"string\">\":0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, Object&gt; retMap = objectMapper.readValue(retStr, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;<span class=\"built_in\">String</span>, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;Integer, <span class=\"built_in\">String</span>&gt; dataMap = (Map&lt;Integer, <span class=\"built_in\">String</span>&gt;) retMap.<span class=\"keyword\">get</span>(<span class=\"string\">\"data\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean </span>existing = dataMap.containsKey(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>明明dataMap中存在key=1的键值对，但是得到的结果却是false。<br>此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。<br><img src=\"/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png\" alt=\"cast_numeric_string_to_Integer01.png\"><br>深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringKD</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdKeyDeserializer</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">String</span> _parse(<span class=\"type\">String</span> key, <span class=\"type\">DeserializationContext</span> ctxt) <span class=\"keyword\">throws</span> <span class=\"type\">JsonMappingException</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> retStr = <span class=\"string\">\"&#123;\\\"</span>data\\<span class=\"string\">\":&#123;\\\"</span><span class=\"number\">1</span>\\<span class=\"string\">\":\\\"</span>观景\\<span class=\"string\">\",\\\"</span><span class=\"number\">2</span>\\<span class=\"string\">\":\\\"</span>小资\\<span class=\"string\">\",\\\"</span><span class=\"number\">3</span>\\<span class=\"string\">\":\\\"</span>院落\\<span class=\"string\">\"&#125;,\\\"</span>ret\\<span class=\"string\">\":true,\\\"</span>errcode\\<span class=\"string\">\":0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, Object&gt; retMap = objectMapper.readValue(retStr, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;<span class=\"built_in\">String</span>, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; dataMap = (Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;) retMap.<span class=\"keyword\">get</span>(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">Map&lt;Integer, <span class=\"built_in\">String</span>&gt; tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; entry : dataMap.entrySet()) &#123;</span><br><span class=\"line\">    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">boolean existing = tempMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxResult</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> errcode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResult <span class=\"title\">setRet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ret = ret;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getErrcode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errcode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResult <span class=\"title\">setErrcode</span><span class=\"params\">(<span class=\"keyword\">int</span> errcode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errcode = errcode;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer, String&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResult <span class=\"title\">setData</span><span class=\"params\">(Map&lt;Integer, String&gt; data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AjaxResult ajaxResult = objectMapper.readValue(retStr, <span class=\"literal\">new</span> TypeReference&lt;AjaxResult&gt;() &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Integer</span>, <span class=\"built_in\">String</span>&gt; ajaxDataMap = ajaxResult.getData();</span><br><span class=\"line\">dataNodeMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"1\"</span>: <span class=\"string\">\"观景\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"2\"</span>: <span class=\"string\">\"小资\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"3\"</span>: <span class=\"string\">\"院落\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ret\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"errcode\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后使用如下代码对其进行反序列化：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> retStr = <span class=\"string\">\"&#123;\\\"</span>data\\<span class=\"string\">\":&#123;\\\"</span><span class=\"number\">1</span>\\<span class=\"string\">\":\\\"</span>观景\\<span class=\"string\">\",\\\"</span><span class=\"number\">2</span>\\<span class=\"string\">\":\\\"</span>小资\\<span class=\"string\">\",\\\"</span><span class=\"number\">3</span>\\<span class=\"string\">\":\\\"</span>院落\\<span class=\"string\">\"&#125;,\\\"</span>ret\\<span class=\"string\">\":true,\\\"</span>errcode\\<span class=\"string\">\":0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, Object&gt; retMap = objectMapper.readValue(retStr, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;<span class=\"built_in\">String</span>, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;Integer, <span class=\"built_in\">String</span>&gt; dataMap = (Map&lt;Integer, <span class=\"built_in\">String</span>&gt;) retMap.<span class=\"keyword\">get</span>(<span class=\"string\">\"data\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean </span>existing = dataMap.containsKey(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>明明dataMap中存在key=1的键值对，但是得到的结果却是false。<br>此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。<br><img src=\"/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png\" alt=\"cast_numeric_string_to_Integer01.png\"><br>深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringKD</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdKeyDeserializer</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">String</span> _parse(<span class=\"type\">String</span> key, <span class=\"type\">DeserializationContext</span> ctxt) <span class=\"keyword\">throws</span> <span class=\"type\">JsonMappingException</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> retStr = <span class=\"string\">\"&#123;\\\"</span>data\\<span class=\"string\">\":&#123;\\\"</span><span class=\"number\">1</span>\\<span class=\"string\">\":\\\"</span>观景\\<span class=\"string\">\",\\\"</span><span class=\"number\">2</span>\\<span class=\"string\">\":\\\"</span>小资\\<span class=\"string\">\",\\\"</span><span class=\"number\">3</span>\\<span class=\"string\">\":\\\"</span>院落\\<span class=\"string\">\"&#125;,\\\"</span>ret\\<span class=\"string\">\":true,\\\"</span>errcode\\<span class=\"string\">\":0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, Object&gt; retMap = objectMapper.readValue(retStr, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;<span class=\"built_in\">String</span>, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; dataMap = (Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;) retMap.<span class=\"keyword\">get</span>(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">Map&lt;Integer, <span class=\"built_in\">String</span>&gt; tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; entry : dataMap.entrySet()) &#123;</span><br><span class=\"line\">    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">boolean existing = tempMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxResult</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> errcode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResult <span class=\"title\">setRet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ret = ret;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getErrcode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errcode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResult <span class=\"title\">setErrcode</span><span class=\"params\">(<span class=\"keyword\">int</span> errcode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errcode = errcode;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer, String&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResult <span class=\"title\">setData</span><span class=\"params\">(Map&lt;Integer, String&gt; data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AjaxResult ajaxResult = objectMapper.readValue(retStr, <span class=\"literal\">new</span> TypeReference&lt;AjaxResult&gt;() &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Integer</span>, <span class=\"built_in\">String</span>&gt; ajaxDataMap = ajaxResult.getData();</span><br><span class=\"line\">dataNodeMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"git base commands","date":"2015-09-24T03:52:12.000Z","_content":"### 初始化\n```\n$ mkdir test\n$ cd test\n$ git init\n```\n\n### config\n```\n$ git config --global user.name username\n$ git config --global user.email useremail.chn@gmail.com\n```\n\n### 文件修改 、查看状态、文件添加以及修改提交\n```\n$ echo \"hello world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"first\" //提交第一个版本\n$ echo \"hello new world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"second\" //提交第二个版本\n```\n\n### 版本切换\n查看更新记录\n```\n$ git log\n```\n使用能够区别版本的前几位即可\n```\n$ git checkout commit-id\n```\n\n### 远程提交\n添加远程仓库\n```\n$ git remote add origin https://github.com/windpuller/test.git\n```\n将修改提交到服务器端\n```\n$ git push -u origin master\n```\n\n### 检出仓库\n创建本地仓库的克隆版本\n```\n$ git clone /path/to/repository\n```\n创建远端服务器的克隆版本\n```\n$ git clone uxername@host:/past/to/repository\n```\n\n### 分支\n创建分支\n```\n$ git branch branch1\n```\n切换分支\n```\n$ git checkout branch1\n```\n删除本地分支\n```\n$ git branch -d branch1\n```\n删除远程分支(慎重使用)\n```\n$ git branch -r -d origin/branch1\n$ git push origin :branch1\n```\n将分支推送到远端仓库，不推送的话分支是不为他人所见的\n```\n$ git push origin branch1\n```\n\n\n### 更新与合并\n更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能\n```\n$ git pull\n```\n合并其他分支到当前分支\n```\n$ git merge branch\n```\n在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。\n在合并改动之前，可以使用如下命令预览差异：\n```\n$git diff source_branch target_branch\n```\n\n### 标签\n为某个版本创建标签\n```\n$ git tag tag-name commit-ID\n```\n\n### 替换本地改动\n如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响\n```\n$ git checkout -- filename\n```\n如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：\n```\n$ git fetch origin\n$ git reset --hard origin/master\n```\n\n### 实用小贴士\n内建的图形化git\n```\n$ gitk\n```\n彩色的git输出\n```\n$ git config color.ui true\n```\n显示历史记录时，每个提交的信息只显示一行\n```\n$ git config format.pretty oneline\n```\n交互式添加文件到暂存区\n```\n$ git add -i\n```\n\n### 参考文献：\n1. http://rogerdudler.github.io/git-guide/index.zh.html\n","source":"_posts/git-base-commands.md","raw":"title: git base commands\ndate: 2015-09-24 11:52:12\ntags: git\n---\n### 初始化\n```\n$ mkdir test\n$ cd test\n$ git init\n```\n\n### config\n```\n$ git config --global user.name username\n$ git config --global user.email useremail.chn@gmail.com\n```\n\n### 文件修改 、查看状态、文件添加以及修改提交\n```\n$ echo \"hello world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"first\" //提交第一个版本\n$ echo \"hello new world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"second\" //提交第二个版本\n```\n\n### 版本切换\n查看更新记录\n```\n$ git log\n```\n使用能够区别版本的前几位即可\n```\n$ git checkout commit-id\n```\n\n### 远程提交\n添加远程仓库\n```\n$ git remote add origin https://github.com/windpuller/test.git\n```\n将修改提交到服务器端\n```\n$ git push -u origin master\n```\n\n### 检出仓库\n创建本地仓库的克隆版本\n```\n$ git clone /path/to/repository\n```\n创建远端服务器的克隆版本\n```\n$ git clone uxername@host:/past/to/repository\n```\n\n### 分支\n创建分支\n```\n$ git branch branch1\n```\n切换分支\n```\n$ git checkout branch1\n```\n删除本地分支\n```\n$ git branch -d branch1\n```\n删除远程分支(慎重使用)\n```\n$ git branch -r -d origin/branch1\n$ git push origin :branch1\n```\n将分支推送到远端仓库，不推送的话分支是不为他人所见的\n```\n$ git push origin branch1\n```\n\n\n### 更新与合并\n更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能\n```\n$ git pull\n```\n合并其他分支到当前分支\n```\n$ git merge branch\n```\n在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。\n在合并改动之前，可以使用如下命令预览差异：\n```\n$git diff source_branch target_branch\n```\n\n### 标签\n为某个版本创建标签\n```\n$ git tag tag-name commit-ID\n```\n\n### 替换本地改动\n如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响\n```\n$ git checkout -- filename\n```\n如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：\n```\n$ git fetch origin\n$ git reset --hard origin/master\n```\n\n### 实用小贴士\n内建的图形化git\n```\n$ gitk\n```\n彩色的git输出\n```\n$ git config color.ui true\n```\n显示历史记录时，每个提交的信息只显示一行\n```\n$ git config format.pretty oneline\n```\n交互式添加文件到暂存区\n```\n$ git add -i\n```\n\n### 参考文献：\n1. http://rogerdudler.github.io/git-guide/index.zh.html\n","slug":"git-base-commands","published":1,"updated":"2016-02-03T06:57:59.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tp900093uamhl4gkhc9","content":"<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">mkdir</span> <span class=\"keyword\">test</span></span><br><span class=\"line\">$ <span class=\"keyword\">cd</span> <span class=\"keyword\">test</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> username</span><br><span class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> useremail.chn@gmail.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件修改-、查看状态、文件添加以及修改提交\"><a href=\"#文件修改-、查看状态、文件添加以及修改提交\" class=\"headerlink\" title=\"文件修改 、查看状态、文件添加以及修改提交\"></a>文件修改 、查看状态、文件添加以及修改提交</h3><figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$ </span>echo <span class=\"comment\">\"hello world\"</span>&gt;&gt;new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git add new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git commit -m <span class=\"comment\">\"first\"</span> //提交第一个版本</span><br><span class=\"line\"><span class=\"string\">$ </span>echo <span class=\"comment\">\"hello new world\"</span>&gt;&gt;new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git add new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git commit -m <span class=\"comment\">\"second\"</span> //提交第二个版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本切换\"><a href=\"#版本切换\" class=\"headerlink\" title=\"版本切换\"></a>版本切换</h3><p>查看更新记录<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure></p>\n<p>使用能够区别版本的前几位即可<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"keyword\">commit</span>-<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"远程提交\"><a href=\"#远程提交\" class=\"headerlink\" title=\"远程提交\"></a>远程提交</h3><p>添加远程仓库<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/windpuller/test.git</span><br></pre></td></tr></table></figure></p>\n<p>将修改提交到服务器端<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h3><p>创建本地仓库的克隆版本<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">/path</span>/to/repository</span><br></pre></td></tr></table></figure></p>\n<p>创建远端服务器的克隆版本<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git clone uxername<span class=\"variable\">@host</span><span class=\"symbol\">:/past/to/repository</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>创建分支<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span><span class=\"keyword\">branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>切换分支<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git checkout branch1</span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-d <span class=\"keyword\">branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>删除远程分支(慎重使用)<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-r -d origin/<span class=\"keyword\">branch1</span><br><span class=\"line\"></span>$ git <span class=\"keyword\">push </span>origin :<span class=\"keyword\">branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>将分支推送到远端仓库，不推送的话分支是不为他人所见的<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> branch1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h3><p>更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure></p>\n<p>合并其他分支到当前分支<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> branch</span><br></pre></td></tr></table></figure></p>\n<p>在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。<br>在合并改动之前，可以使用如下命令预览差异：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git diff source_branch target_branch</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>为某个版本创建标签<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">tag-name</span> commit-ID</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h3><p>如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"comment\">-- filename</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch <span class=\"built_in\">origin</span></span><br><span class=\"line\">$ git <span class=\"built_in\">reset</span> --hard <span class=\"built_in\">origin</span>/master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实用小贴士\"><a href=\"#实用小贴士\" class=\"headerlink\" title=\"实用小贴士\"></a>实用小贴士</h3><p>内建的图形化git<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>gitk</span><br></pre></td></tr></table></figure></p>\n<p>彩色的git输出<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git config color.ui <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>显示历史记录时，每个提交的信息只显示一行<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config format<span class=\"selector-class\">.pretty</span> oneline</span><br></pre></td></tr></table></figure></p>\n<p>交互式添加文件到暂存区<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add </span>-i</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ol>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"external\">http://rogerdudler.github.io/git-guide/index.zh.html</a></li>\n</ol>\n","excerpt":"","more":"<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">mkdir</span> <span class=\"keyword\">test</span></span><br><span class=\"line\">$ <span class=\"keyword\">cd</span> <span class=\"keyword\">test</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> username</span><br><span class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> useremail.chn@gmail.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件修改-、查看状态、文件添加以及修改提交\"><a href=\"#文件修改-、查看状态、文件添加以及修改提交\" class=\"headerlink\" title=\"文件修改 、查看状态、文件添加以及修改提交\"></a>文件修改 、查看状态、文件添加以及修改提交</h3><figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$ </span>echo <span class=\"comment\">\"hello world\"</span>&gt;&gt;new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git add new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git commit -m <span class=\"comment\">\"first\"</span> //提交第一个版本</span><br><span class=\"line\"><span class=\"string\">$ </span>echo <span class=\"comment\">\"hello new world\"</span>&gt;&gt;new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git add new.txt</span><br><span class=\"line\"><span class=\"string\">$ </span>git status</span><br><span class=\"line\"><span class=\"string\">$ </span>git commit -m <span class=\"comment\">\"second\"</span> //提交第二个版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本切换\"><a href=\"#版本切换\" class=\"headerlink\" title=\"版本切换\"></a>版本切换</h3><p>查看更新记录<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure></p>\n<p>使用能够区别版本的前几位即可<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"keyword\">commit</span>-<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"远程提交\"><a href=\"#远程提交\" class=\"headerlink\" title=\"远程提交\"></a>远程提交</h3><p>添加远程仓库<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/windpuller/test.git</span><br></pre></td></tr></table></figure></p>\n<p>将修改提交到服务器端<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h3><p>创建本地仓库的克隆版本<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">/path</span>/to/repository</span><br></pre></td></tr></table></figure></p>\n<p>创建远端服务器的克隆版本<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git clone uxername<span class=\"variable\">@host</span><span class=\"symbol\">:/past/to/repository</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>创建分支<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span><span class=\"keyword\">branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>切换分支<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git checkout branch1</span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-d <span class=\"keyword\">branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>删除远程分支(慎重使用)<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-r -d origin/<span class=\"keyword\">branch1</span><br><span class=\"line\"></span>$ git <span class=\"keyword\">push </span>origin :<span class=\"keyword\">branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>将分支推送到远端仓库，不推送的话分支是不为他人所见的<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> branch1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h3><p>更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure></p>\n<p>合并其他分支到当前分支<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> branch</span><br></pre></td></tr></table></figure></p>\n<p>在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。<br>在合并改动之前，可以使用如下命令预览差异：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git diff source_branch target_branch</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>为某个版本创建标签<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">tag-name</span> commit-ID</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h3><p>如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"comment\">-- filename</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch <span class=\"built_in\">origin</span></span><br><span class=\"line\">$ git <span class=\"built_in\">reset</span> --hard <span class=\"built_in\">origin</span>/master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实用小贴士\"><a href=\"#实用小贴士\" class=\"headerlink\" title=\"实用小贴士\"></a>实用小贴士</h3><p>内建的图形化git<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>gitk</span><br></pre></td></tr></table></figure></p>\n<p>彩色的git输出<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git config color.ui <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>显示历史记录时，每个提交的信息只显示一行<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config format<span class=\"selector-class\">.pretty</span> oneline</span><br></pre></td></tr></table></figure></p>\n<p>交互式添加文件到暂存区<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add </span>-i</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ol>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">http://rogerdudler.github.io/git-guide/index.zh.html</a></li>\n</ol>\n"},{"title":"mount partitions on startup in archlinux","date":"2016-01-17T09:36:47.000Z","_content":"\n机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。\n\n### 第一步，grub rescue的处理\n先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。\n解决办法是：\n1. 列出所有分区\n```\ngrub rescue> ls\n```\n2. 依次ls每个分区直到找到不报'unknown filesystem'的分区，比如n=5\n```\ngrub rescue> ls (hd0,msdos5)/boot/grub\n```\n3. 依次执行以下命令，可进入正常的系统引导界面\n```\ngrub rescue> set root=(hd0,msdos5)/boot/grub\ngrub rescue> set prefix=(hd0,msdos5)/boot/grub\ngrub rescue> insmod normal\ngrub rescue> normal\n```\n4. 进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常\n```\n$ sudo grub-install /dev/sda\n```\n\n### 第二步，archlinux挂载分区\n配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend\n1. 找到要挂载的新分区硬盘号码，比如/dev/sda5\n```\n$ sudo fdisk -l\n```\n2. 格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)\n```\n$ sudo mkfs.ext4 /dev/sda5\n```\n3. 配置新分区在系统启动的时候挂载，并映射为/extend\n修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序\n```\nUUID=59f8ba70-62d4-4d1d-982e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   0 3\n```\n","source":"_posts/mount-partitions-on-startup-in-archlinux.md","raw":"title: mount partitions on startup in archlinux\ndate: 2016-01-17 17:36:47\ntags: [archlinux, mount partitions, grub rescue]\n---\n\n机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。\n\n### 第一步，grub rescue的处理\n先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。\n解决办法是：\n1. 列出所有分区\n```\ngrub rescue> ls\n```\n2. 依次ls每个分区直到找到不报'unknown filesystem'的分区，比如n=5\n```\ngrub rescue> ls (hd0,msdos5)/boot/grub\n```\n3. 依次执行以下命令，可进入正常的系统引导界面\n```\ngrub rescue> set root=(hd0,msdos5)/boot/grub\ngrub rescue> set prefix=(hd0,msdos5)/boot/grub\ngrub rescue> insmod normal\ngrub rescue> normal\n```\n4. 进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常\n```\n$ sudo grub-install /dev/sda\n```\n\n### 第二步，archlinux挂载分区\n配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend\n1. 找到要挂载的新分区硬盘号码，比如/dev/sda5\n```\n$ sudo fdisk -l\n```\n2. 格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)\n```\n$ sudo mkfs.ext4 /dev/sda5\n```\n3. 配置新分区在系统启动的时候挂载，并映射为/extend\n修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序\n```\nUUID=59f8ba70-62d4-4d1d-982e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   0 3\n```\n","slug":"mount-partitions-on-startup-in-archlinux","published":1,"updated":"2016-02-03T06:06:22.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tpd000c3uamxenx6a9w","content":"<p>机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。</p>\n<h3 id=\"第一步，grub-rescue的处理\"><a href=\"#第一步，grub-rescue的处理\" class=\"headerlink\" title=\"第一步，grub rescue的处理\"></a>第一步，grub rescue的处理</h3><p>先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。<br>解决办法是：</p>\n<ol>\n<li><p>列出所有分区</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub <span class=\"keyword\">rescue</span>&gt; ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次ls每个分区直到找到不报’unknown filesystem’的分区，比如n=5</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; ls (<span class=\"name\">hd0</span>,msdos5)/boot/grub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下命令，可进入正常的系统引导界面</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; <span class=\"keyword\">set</span> root=(hd0,msdos5)/<span class=\"keyword\">boot</span>/grub</span><br><span class=\"line\">grub rescue&gt; <span class=\"keyword\">set</span> prefix=(hd0,msdos5)/<span class=\"keyword\">boot</span>/grub</span><br><span class=\"line\">grub rescue&gt; insmod <span class=\"built_in\">normal</span></span><br><span class=\"line\">grub rescue&gt; <span class=\"built_in\">normal</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo grub-<span class=\"keyword\">install</span> /dev/sda</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"第二步，archlinux挂载分区\"><a href=\"#第二步，archlinux挂载分区\" class=\"headerlink\" title=\"第二步，archlinux挂载分区\"></a>第二步，archlinux挂载分区</h3><p>配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend</p>\n<ol>\n<li><p>找到要挂载的新分区硬盘号码，比如/dev/sda5</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo fdisk <span class=\"_\">-l</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkfs<span class=\"selector-class\">.ext4</span> /dev/sda5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置新分区在系统启动的时候挂载，并映射为/extend<br>修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">UUID</span><span class=\"number\">=59</span>f8ba70-<span class=\"number\">62</span><span class=\"built_in\">d4</span>-<span class=\"number\">4</span>d1d-<span class=\"number\">982</span>e-a33166d59394  /extend  ext4  rw,relatime,<span class=\"meta\">data</span><span class=\"symbol\">=ordered</span>   <span class=\"number\">0</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<p>机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。</p>\n<h3 id=\"第一步，grub-rescue的处理\"><a href=\"#第一步，grub-rescue的处理\" class=\"headerlink\" title=\"第一步，grub rescue的处理\"></a>第一步，grub rescue的处理</h3><p>先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。<br>解决办法是：</p>\n<ol>\n<li><p>列出所有分区</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub <span class=\"keyword\">rescue</span>&gt; ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次ls每个分区直到找到不报’unknown filesystem’的分区，比如n=5</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; ls (<span class=\"name\">hd0</span>,msdos5)/boot/grub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下命令，可进入正常的系统引导界面</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; <span class=\"keyword\">set</span> root=(hd0,msdos5)/<span class=\"keyword\">boot</span>/grub</span><br><span class=\"line\">grub rescue&gt; <span class=\"keyword\">set</span> prefix=(hd0,msdos5)/<span class=\"keyword\">boot</span>/grub</span><br><span class=\"line\">grub rescue&gt; insmod <span class=\"built_in\">normal</span></span><br><span class=\"line\">grub rescue&gt; <span class=\"built_in\">normal</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo grub-<span class=\"keyword\">install</span> /dev/sda</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"第二步，archlinux挂载分区\"><a href=\"#第二步，archlinux挂载分区\" class=\"headerlink\" title=\"第二步，archlinux挂载分区\"></a>第二步，archlinux挂载分区</h3><p>配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend</p>\n<ol>\n<li><p>找到要挂载的新分区硬盘号码，比如/dev/sda5</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo fdisk <span class=\"_\">-l</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkfs<span class=\"selector-class\">.ext4</span> /dev/sda5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置新分区在系统启动的时候挂载，并映射为/extend<br>修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">UUID</span><span class=\"number\">=59</span>f8ba70-<span class=\"number\">62</span><span class=\"built_in\">d4</span>-<span class=\"number\">4</span>d1d-<span class=\"number\">982</span>e-a33166d59394  /extend  ext4  rw,relatime,<span class=\"meta\">data</span><span class=\"symbol\">=ordered</span>   <span class=\"number\">0</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"@transactional","date":"2015-11-08T03:36:44.000Z","_content":"在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。\n在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。\n同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。\n之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。\n如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：\n```\n@Service(\"transactionalTestClass\")\npublic class TransactionalTestClass {\n    \n    @Resource(\"transactionalTestClass\")\n    private TransactionalTestClass transactionalTestClass;\n    \n    public void noTransactionalMethod(){\n        transactionalTestClass.transactionalMethod();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transactionalMethod() {\n        //do somthing\n    }\n}\n```","source":"_posts/transactional.md","raw":"title: '@transactional'\ndate: 2015-11-08 11:36:44\ntags: [transactional, spring, java]\n---\n在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。\n在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。\n同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。\n之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。\n如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：\n```\n@Service(\"transactionalTestClass\")\npublic class TransactionalTestClass {\n    \n    @Resource(\"transactionalTestClass\")\n    private TransactionalTestClass transactionalTestClass;\n    \n    public void noTransactionalMethod(){\n        transactionalTestClass.transactionalMethod();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transactionalMethod() {\n        //do somthing\n    }\n}\n```","slug":"transactional","published":1,"updated":"2015-11-08T08:19:07.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioba9tpe000d3uamk7ej0ya8","content":"<p>在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。<br>在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。<br>同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。<br>之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。<br>如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionalTestClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionalTestClass transactionalTestClass;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noTransactionalMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        transactionalTestClass.transactionalMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transactionalMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do somthing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。<br>在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。<br>同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。<br>之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。<br>如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionalTestClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionalTestClass transactionalTestClass;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noTransactionalMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        transactionalTestClass.transactionalMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transactionalMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do somthing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/deserialize-numeric-string-for-map-key-in-json/image01.png","slug":"image01.png","post":"cioba9tp700083uamqoyk309l","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cioba9tom00003uamril2l8hg","tag_id":"cioba9tox00023uama73t2n3s","_id":"cioba9tp600073uamimfrpbcp"},{"post_id":"cioba9toy00033uamxxztds2w","tag_id":"cioba9tp200053uamvvfp72up","_id":"cioba9tpd000b3uamdvpustes"},{"post_id":"cioba9tp100043uamk4s5016z","tag_id":"cioba9tpc000a3uam30adpw4e","_id":"cioba9tpn000i3uamoue4dqjt"},{"post_id":"cioba9tp100043uamk4s5016z","tag_id":"cioba9tpg000e3uamcw9rydn2","_id":"cioba9tpo000j3uam0p1h3i8q"},{"post_id":"cioba9tp100043uamk4s5016z","tag_id":"cioba9tph000f3uam0fdawuh2","_id":"cioba9tpq000l3uamjs9dg5h4"},{"post_id":"cioba9tp100043uamk4s5016z","tag_id":"cioba9tpj000g3uam9x4qj8iz","_id":"cioba9tpq000m3uamotz0mwhf"},{"post_id":"cioba9tp200063uamg70a26ub","tag_id":"cioba9tpl000h3uam7ja61yrf","_id":"cioba9tpr000o3uamuppjxufd"},{"post_id":"cioba9tp700083uamqoyk309l","tag_id":"cioba9tph000f3uam0fdawuh2","_id":"cioba9tpy000r3uamcv1hqdf6"},{"post_id":"cioba9tp700083uamqoyk309l","tag_id":"cioba9tpq000n3uamwznc80k9","_id":"cioba9tpy000s3uamfkvm7fgj"},{"post_id":"cioba9tp700083uamqoyk309l","tag_id":"cioba9tpv000p3uamettltzur","_id":"cioba9tpz000u3uampndf6pi7"},{"post_id":"cioba9tp900093uamhl4gkhc9","tag_id":"cioba9tpw000q3uamahjh9b00","_id":"cioba9tpz000v3uam71fb6gtc"},{"post_id":"cioba9tpd000c3uamxenx6a9w","tag_id":"cioba9tox00023uama73t2n3s","_id":"cioba9tq1000y3uam4j1rzw0q"},{"post_id":"cioba9tpd000c3uamxenx6a9w","tag_id":"cioba9tpy000t3uamxn1v8aez","_id":"cioba9tq2000z3uampnlhgtg9"},{"post_id":"cioba9tpd000c3uamxenx6a9w","tag_id":"cioba9tpz000w3uamda4i69zb","_id":"cioba9tq400113uam1f6stqin"},{"post_id":"cioba9tpe000d3uamk7ej0ya8","tag_id":"cioba9tq1000x3uam811ec646","_id":"cioba9tq600133uamteev0d8k"},{"post_id":"cioba9tpe000d3uamk7ej0ya8","tag_id":"cioba9tpg000e3uamcw9rydn2","_id":"cioba9tq600143uamre3j9wy2"},{"post_id":"cioba9tpe000d3uamk7ej0ya8","tag_id":"cioba9tph000f3uam0fdawuh2","_id":"cioba9tq600153uamzdk5m0s9"}],"Tag":[{"name":"archlinux","_id":"cioba9tox00023uama73t2n3s"},{"name":"restful","_id":"cioba9tp200053uamvvfp72up"},{"name":"circular dependency","_id":"cioba9tpc000a3uam30adpw4e"},{"name":"spring","_id":"cioba9tpg000e3uamcw9rydn2"},{"name":"java","_id":"cioba9tph000f3uam0fdawuh2"},{"name":"inherited","_id":"cioba9tpj000g3uam9x4qj8iz"},{"name":"csrf","_id":"cioba9tpl000h3uam7ja61yrf"},{"name":"jackson","_id":"cioba9tpq000n3uamwznc80k9"},{"name":"deserialization","_id":"cioba9tpv000p3uamettltzur"},{"name":"git","_id":"cioba9tpw000q3uamahjh9b00"},{"name":"mount partitions","_id":"cioba9tpy000t3uamxn1v8aez"},{"name":"grub rescue","_id":"cioba9tpz000w3uamda4i69zb"},{"name":"transactional","_id":"cioba9tq1000x3uam811ec646"}]}}