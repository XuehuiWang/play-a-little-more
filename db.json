{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1522912246871},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1522912246872},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1522912246872},{"_id":"themes/apollo/_config.yml","hash":"2fd52d58398f89aaf95cc1931a5e6bd25d42524b","modified":1522914597127},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1522912246873},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1522912246876},{"_id":"source/_drafts/install-archlinux-from-hard-disk.md","hash":"93de1876d33c11aa712863b5f80ccc4d0ebb9b5a","modified":1472812778000},{"_id":"source/_drafts/java-profiling-tools.md","hash":"8e7b9816e9a4007fe7c1b57b71d6ab9f4dbc1ac1","modified":1472812778000},{"_id":"source/_drafts/java-shutdown-hook.md","hash":"434c1be2f6a7c0a9ce708412a9fb27db9876a9ab","modified":1472812778000},{"_id":"source/_posts/RESTful-note.md","hash":"0fa1b3fcc4fa8bdbbc54827d74d230f9df571ba4","modified":1472812778000},{"_id":"source/_posts/Spring-circular-dependency.md","hash":"4b6f03f631de3db0518aefebb658c489b5acc853","modified":1472812778000},{"_id":"source/_posts/csrf-defense.md","hash":"0efd27818fcddd1214c5453fa7a51278f5f84550","modified":1472812778000},{"_id":"source/_posts/deserialize-numeric-string-for-map-key-in-json.md","hash":"f78baaf241d0213b7d4e94eb8091e665b73cb71c","modified":1472812778000},{"_id":"source/_posts/git-base-commands.md","hash":"86497d89baeec9e0f2c151f174e4307aecb3989c","modified":1472812778000},{"_id":"source/_posts/mount-partitions-on-startup-in-archlinux.md","hash":"87a5bb22b6d7309caacbae32e6c80bab0989948d","modified":1472812778000},{"_id":"source/_posts/transactional.md","hash":"5988525cdc33f61ef2a66230a03f9114cd95a60e","modified":1472812778000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1522912246866},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1522912246867},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1522912242527},{"_id":"themes/apollo/.git/index","hash":"d4585b8c7029ed8819b6dd576fa09bd309d295ae","modified":1522913049166},{"_id":"themes/apollo/.git/packed-refs","hash":"aa26c25376c7e08c8fdb4920d5feed589e8f3eea","modified":1522912246864},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1522912246872},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1522912246872},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1522912246873},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1522912246873},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1522912246873},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1522912246873},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1522912246875},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1522912246876},{"_id":"source/_posts/deserialize-numeric-string-for-map-key-in-json/image01.png","hash":"f83dfa4ff9517d0d60b4d2b21b65f14849af27a9","modified":1472812778000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1522912242529},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1522912242527},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1522912242529},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1522912242528},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1522912242530},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1522912242530},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1522912242528},{"_id":"themes/apollo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1522912242529},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1522912242529},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1522912242530},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1522912242527},{"_id":"themes/apollo/.git/logs/HEAD","hash":"4a88ce7a8fb4cadb0a2a015a9324ecd509ef161c","modified":1522912246866},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1522912246874},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1522912246874},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1522912246874},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1522912246874},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1522912246874},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1522912246875},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1522912246875},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1522912246875},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1522912246876},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1522912246877},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1522912246877},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1522912246880},{"_id":"themes/apollo/.git/objects/pack/pack-c2c5ef3ed848a98d83e90f274a750ebc440ae015.idx","hash":"8c1076f4fe597fbc3ee8a7dabf01f7d99ae801e4","modified":1522912246851},{"_id":"themes/apollo/.git/refs/heads/master","hash":"bb45244afa960985b39f4bb9b86f3b4430f210ba","modified":1522912246866},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1522912246878},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1522912246878},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1522912246878},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1522912246878},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1522912246879},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1522912246879},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1522912246879},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1522912246880},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1522912246880},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"4a88ce7a8fb4cadb0a2a015a9324ecd509ef161c","modified":1522912246867},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1522912246865},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"4a88ce7a8fb4cadb0a2a015a9324ecd509ef161c","modified":1522912246865},{"_id":"themes/apollo/.git/objects/pack/pack-c2c5ef3ed848a98d83e90f274a750ebc440ae015.pack","hash":"61afd27d8be982efeeba8d37e46294898cd54f8b","modified":1522912246850},{"_id":"public/atom.xml","hash":"627f2780022f8f2d351fa980455403ef3dbacb34","modified":1522914792229},{"_id":"public/sitemap.xml","hash":"54269de442ed51904d8385c38ef59273a0624566","modified":1522914792231},{"_id":"public/2016/05/17/RESTful-note/index.html","hash":"291496a5ad5c169adf826cc3290e8f2caa4e46c3","modified":1522914792234},{"_id":"public/2016/02/28/deserialize-numeric-string-for-map-key-in-json/index.html","hash":"1db4fca5a738b07352d62903688f8fc6632b3938","modified":1522914792234},{"_id":"public/2016/01/17/mount-partitions-on-startup-in-archlinux/index.html","hash":"7da9ea136c2df714bcd83dbc01af3b3420b12c55","modified":1522914792234},{"_id":"public/2015/11/22/csrf-defense/index.html","hash":"0aa55d15ccdb6f9150f4a2ddac629533b96234e3","modified":1522914792234},{"_id":"public/2015/11/08/transactional/index.html","hash":"961386456bab07eeb3224e25fe88b3a00db45f72","modified":1522914792235},{"_id":"public/2015/10/25/Spring-circular-dependency/index.html","hash":"b2b5f90d7f9c03adc1f8a5459173579ec2469834","modified":1522914792235},{"_id":"public/2015/09/24/git-base-commands/index.html","hash":"9cd5bc8bf4309ae1a2d2ea7b342ba8dc54b22366","modified":1522914792235},{"_id":"public/archives/index.html","hash":"95d4916a082685234502046135c9a02e66a0a437","modified":1522914792235},{"_id":"public/archives/2015/index.html","hash":"81c542d4d24a14c079c7dea4e3e405a0fe0cdfb2","modified":1522914792235},{"_id":"public/archives/2015/09/index.html","hash":"3973ee67879383ce469dabcf9be0ec8223931444","modified":1522914792235},{"_id":"public/archives/2015/10/index.html","hash":"37ead12a8546fdb93657be902aa9891c541d8bd2","modified":1522914792235},{"_id":"public/archives/2015/11/index.html","hash":"8ce65ab8e652120ceaa66d21590320962f749fb1","modified":1522914792235},{"_id":"public/archives/2016/index.html","hash":"9317fd25f52e6f882a31b0f54ef4c1f6bee69a03","modified":1522914792235},{"_id":"public/archives/2016/01/index.html","hash":"a172cf92f1d89dbae82e0b30f8abd27b1e42c4ed","modified":1522914792236},{"_id":"public/archives/2016/02/index.html","hash":"316de5f5ec82371c6acac975a247ffcfa9c96c41","modified":1522914792236},{"_id":"public/archives/2016/05/index.html","hash":"9536e460b4fb5cad3eee78b5b3dbbcdeb95dc79d","modified":1522914792236},{"_id":"public/index.html","hash":"ff1bd3ac32cf2f1faf97be459ea90ef0d0ac54a5","modified":1522914792236},{"_id":"public/tags/archlinux/index.html","hash":"a172cf92f1d89dbae82e0b30f8abd27b1e42c4ed","modified":1522914792236},{"_id":"public/tags/restful/index.html","hash":"9536e460b4fb5cad3eee78b5b3dbbcdeb95dc79d","modified":1522914792236},{"_id":"public/tags/circular-dependency/index.html","hash":"37ead12a8546fdb93657be902aa9891c541d8bd2","modified":1522914792236},{"_id":"public/tags/spring/index.html","hash":"d17e1491881e1b7e2ee92e3791fc3e21b782b11a","modified":1522914792236},{"_id":"public/tags/java/index.html","hash":"85799554901dc8839a48dc9505a8f22bd4adcf15","modified":1522914792236},{"_id":"public/tags/inherited/index.html","hash":"37ead12a8546fdb93657be902aa9891c541d8bd2","modified":1522914792236},{"_id":"public/tags/csrf/index.html","hash":"c01bac8be338b971d3762ebcb9baf8d1e483427c","modified":1522914792236},{"_id":"public/tags/jackson/index.html","hash":"316de5f5ec82371c6acac975a247ffcfa9c96c41","modified":1522914792237},{"_id":"public/tags/deserialization/index.html","hash":"316de5f5ec82371c6acac975a247ffcfa9c96c41","modified":1522914792237},{"_id":"public/tags/git/index.html","hash":"3973ee67879383ce469dabcf9be0ec8223931444","modified":1522914792237},{"_id":"public/tags/mount-partitions/index.html","hash":"a172cf92f1d89dbae82e0b30f8abd27b1e42c4ed","modified":1522914792237},{"_id":"public/tags/grub-rescue/index.html","hash":"a172cf92f1d89dbae82e0b30f8abd27b1e42c4ed","modified":1522914792237},{"_id":"public/tags/transactional/index.html","hash":"f68a7762bfb1d7f248da9439abb35b9032df5ae6","modified":1522914792237},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1522914792239},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1522914792239},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1522914792239},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1522914792239},{"_id":"public/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png","hash":"f83dfa4ff9517d0d60b4d2b21b65f14849af27a9","modified":1522914792239},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1522914792243}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"install archlinux from hard disk","_content":"1. 准备工作\n从官方[下载地址](https://www.archlinux.org/download/)选择比较近的源下载最新的镜像文件。这里选择哈工大的[下载源](http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso).把镜像文件中的**VMLINUZ**、**ARCHISO.IMG**放到windows的系统盘根目录下.\n下载引导**wingrub**或者**EasyBCD**，安装之后将menu.lst中的内容更换如下：\n```\ntimeout 5\ndefault 0\n\ntitle  Install Arch Linux\nroot  (hd0,0)\nkernel /vmlinuz archisolabel=ARCH_201602\ninitrd /archiso.img\n```\n","source":"_drafts/install-archlinux-from-hard-disk.md","raw":"title: install archlinux from hard disk\ntags: archlinux\n---\n1. 准备工作\n从官方[下载地址](https://www.archlinux.org/download/)选择比较近的源下载最新的镜像文件。这里选择哈工大的[下载源](http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso).把镜像文件中的**VMLINUZ**、**ARCHISO.IMG**放到windows的系统盘根目录下.\n下载引导**wingrub**或者**EasyBCD**，安装之后将menu.lst中的内容更换如下：\n```\ntimeout 5\ndefault 0\n\ntitle  Install Arch Linux\nroot  (hd0,0)\nkernel /vmlinuz archisolabel=ARCH_201602\ninitrd /archiso.img\n```\n","slug":"install-archlinux-from-hard-disk","published":0,"date":"2016-09-02T10:39:38.000Z","updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859d00000b1wo6e59tg5p","content":"<ol>\n<li>准备工作<br>从官方<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"noopener\">下载地址</a>选择比较近的源下载最新的镜像文件。这里选择哈工大的<a href=\"http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso\" target=\"_blank\" rel=\"noopener\">下载源</a>.把镜像文件中的<strong>VMLINUZ</strong>、<strong>ARCHISO.IMG</strong>放到windows的系统盘根目录下.<br>下载引导<strong>wingrub</strong>或者<strong>EasyBCD</strong>，安装之后将menu.lst中的内容更换如下：<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout 5</span><br><span class=\"line\">default 0</span><br><span class=\"line\"></span><br><span class=\"line\">title  Install Arch Linux</span><br><span class=\"line\">root  (hd0,0)</span><br><span class=\"line\">kernel /vmlinuz <span class=\"attribute\">archisolabel</span>=ARCH_201602</span><br><span class=\"line\">initrd /archiso.img</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>准备工作<br>从官方<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"noopener\">下载地址</a>选择比较近的源下载最新的镜像文件。这里选择哈工大的<a href=\"http://run.hit.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso\" target=\"_blank\" rel=\"noopener\">下载源</a>.把镜像文件中的<strong>VMLINUZ</strong>、<strong>ARCHISO.IMG</strong>放到windows的系统盘根目录下.<br>下载引导<strong>wingrub</strong>或者<strong>EasyBCD</strong>，安装之后将menu.lst中的内容更换如下：<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout 5</span><br><span class=\"line\">default 0</span><br><span class=\"line\"></span><br><span class=\"line\">title  Install Arch Linux</span><br><span class=\"line\">root  (hd0,0)</span><br><span class=\"line\">kernel /vmlinuz <span class=\"attribute\">archisolabel</span>=ARCH_201602</span><br><span class=\"line\">initrd /archiso.img</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"java-profiling-tools","_content":"","source":"_drafts/java-profiling-tools.md","raw":"title: java-profiling-tools\ntags:\n---\n","slug":"java-profiling-tools","published":0,"date":"2016-09-02T10:39:38.000Z","updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859d40001b1wopwwbukxv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java shutdown hook","_content":"","source":"_drafts/java-shutdown-hook.md","raw":"title: java shutdown hook\ntags:\n---\n","slug":"java-shutdown-hook","published":0,"date":"2016-09-02T10:39:38.000Z","updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859d70003b1wofriq4kzr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RESTful note","date":"2016-05-17T10:14:51.000Z","_content":"\n## 1. RESTful\nRESTful，即Representational State Transfer的缩写，字面含义是**表现层状态转化**。是某歪果仁博士提出的一种**网络应用软件架构**风格。  \n根据[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful.html)的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。\n(1) 资源\n表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。\n(2) 表现层\n资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。\n(3) 状态转化\nclient通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。\n## 2. 优势\nRESTful的优势主要体现在与传统C/S架构应用软件的对比上：\n浏览器即客户端，客户端的开发难度和成本降低\n仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源\n系统更新升级方便，向后兼容性好","source":"_posts/RESTful-note.md","raw":"title: RESTful note\ntags: restful\ndate: 2016-05-17 18:14:51\n---\n\n## 1. RESTful\nRESTful，即Representational State Transfer的缩写，字面含义是**表现层状态转化**。是某歪果仁博士提出的一种**网络应用软件架构**风格。  \n根据[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful.html)的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。\n(1) 资源\n表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。\n(2) 表现层\n资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。\n(3) 状态转化\nclient通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。\n## 2. 优势\nRESTful的优势主要体现在与传统C/S架构应用软件的对比上：\n浏览器即客户端，客户端的开发难度和成本降低\n仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源\n系统更新升级方便，向后兼容性好","slug":"RESTful-note","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859d90004b1wot7t5bmbe","content":"<h2 id=\"1-RESTful\"><a href=\"#1-RESTful\" class=\"headerlink\" title=\"1. RESTful\"></a>1. RESTful</h2><p>RESTful，即Representational State Transfer的缩写，字面含义是<strong>表现层状态转化</strong>。是某歪果仁博士提出的一种<strong>网络应用软件架构</strong>风格。<br>根据<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"noopener\">理解RESTful架构</a>的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。<br>(1) 资源<br>表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。<br>(2) 表现层<br>资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。<br>(3) 状态转化<br>client通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。</p>\n<h2 id=\"2-优势\"><a href=\"#2-优势\" class=\"headerlink\" title=\"2. 优势\"></a>2. 优势</h2><p>RESTful的优势主要体现在与传统C/S架构应用软件的对比上：<br>浏览器即客户端，客户端的开发难度和成本降低<br>仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源<br>系统更新升级方便，向后兼容性好</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-RESTful\"><a href=\"#1-RESTful\" class=\"headerlink\" title=\"1. RESTful\"></a>1. RESTful</h2><p>RESTful，即Representational State Transfer的缩写，字面含义是<strong>表现层状态转化</strong>。是某歪果仁博士提出的一种<strong>网络应用软件架构</strong>风格。<br>根据<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"noopener\">理解RESTful架构</a>的分析，RESTful的关键因素主要有三个：资源、表现层、状态转化。<br>(1) 资源<br>表现层依赖的实体，在网络中一般使用URI指定。可以是一张图片，也可以是一段文本。<br>(2) 表现层<br>资源的表现形式，是图片还是文本还是视频，应使用HTTP协议头部的Accept和Content-Type字段指定。<br>(3) 状态转化<br>client通过HTTP协议的GET、POST、PUT、DELETE等操作获取、创建、修改、删除服务器端的资源，并反映在client的展示中。</p>\n<h2 id=\"2-优势\"><a href=\"#2-优势\" class=\"headerlink\" title=\"2. 优势\"></a>2. 优势</h2><p>RESTful的优势主要体现在与传统C/S架构应用软件的对比上：<br>浏览器即客户端，客户端的开发难度和成本降低<br>仅在服务器端存在状态转化，有利于系统结构的拆分和扩展，有利于合理配置服务器资源<br>系统更新升级方便，向后兼容性好</p>\n"},{"title":"Spring circular dependency","date":"2015-10-25T06:11:22.000Z","_content":"最近踩了一个继承加循环依赖的坑，抽象出的代码如下：\nChildClass:\n```\n@Service\npublic class ChildClass extends ParentClass {\n\n    @Resource\n    private TestService testService;\n\n    public String play() {\n        return testService.getParent().play();\n    }\n}\n```\nParentClass:\n```\npublic class ParentClass {\n\n    private String value = \"I am parent class\";\n\n    public String play() {\n        return value;\n    }\n\n    public void setValue(String str) {\n        this.value = str;\n    }\n}\n```\nTestService:\n```\n@Service\npublic class TestService {\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent = create();\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public ParentClass create() {\n        try {\n            Class classDefinition = Class.forName(\"com.springapp.mvc.inherited.ChildClass\");\n            ParentClass parent = (ParentClass) classDefinition.getConstructor(new Class[0]).newInstance(new Object[0]);\n            parent.setValue(\"I was processed by test service\");\n            return parent;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```\nResultController:\n```\n@Controller\n@RequestMapping(\"/inherited\")\npublic class ResultController {\n\n    @Resource\n    private ChildClass childClass;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView printWelcome() {\n        ModelAndView modelAndView = new ModelAndView(\"hello\");\n        modelAndView.addObject(\"message\", childClass.play());\n        return modelAndView;\n    }\n}\n```\n\n我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。\n\n之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：\nParentClass:\n```\n@Service\npublic class TestService {\n    \n    @Resource\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent.setValue(\"I was processed by test service\");\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n}\n```\n此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。\n<code>＠Resource</code>部分注解：\n```\n * Even though this annotation is not marked Inherited, deployment\n * tools are required to examine all superclasses of any component\n * class to discover all uses of this annotation in all superclasses.\n * All such annotation instances specify resources that are needed\n * by the application component.  Note that this annotation may\n * appear on private fields and methods of superclasses; the container\n * is required to perform injection in these cases as well.\n```\n","source":"_posts/Spring-circular-dependency.md","raw":"title: Spring circular dependency\ndate: 2015-10-25 14:11:22\ntags: [circular dependency, spring, java, inherited]\n---\n最近踩了一个继承加循环依赖的坑，抽象出的代码如下：\nChildClass:\n```\n@Service\npublic class ChildClass extends ParentClass {\n\n    @Resource\n    private TestService testService;\n\n    public String play() {\n        return testService.getParent().play();\n    }\n}\n```\nParentClass:\n```\npublic class ParentClass {\n\n    private String value = \"I am parent class\";\n\n    public String play() {\n        return value;\n    }\n\n    public void setValue(String str) {\n        this.value = str;\n    }\n}\n```\nTestService:\n```\n@Service\npublic class TestService {\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent = create();\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public ParentClass create() {\n        try {\n            Class classDefinition = Class.forName(\"com.springapp.mvc.inherited.ChildClass\");\n            ParentClass parent = (ParentClass) classDefinition.getConstructor(new Class[0]).newInstance(new Object[0]);\n            parent.setValue(\"I was processed by test service\");\n            return parent;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```\nResultController:\n```\n@Controller\n@RequestMapping(\"/inherited\")\npublic class ResultController {\n\n    @Resource\n    private ChildClass childClass;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView printWelcome() {\n        ModelAndView modelAndView = new ModelAndView(\"hello\");\n        modelAndView.addObject(\"message\", childClass.play());\n        return modelAndView;\n    }\n}\n```\n\n我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。\n\n之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：\nParentClass:\n```\n@Service\npublic class TestService {\n    \n    @Resource\n    private ParentClass parent;\n\n    @PostConstruct\n    public void init() {\n        parent.setValue(\"I was processed by test service\");\n    }\n\n    public ParentClass getParent() {\n        return this.parent;\n    }\n}\n```\n此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。\n<code>＠Resource</code>部分注解：\n```\n * Even though this annotation is not marked Inherited, deployment\n * tools are required to examine all superclasses of any component\n * class to discover all uses of this annotation in all superclasses.\n * All such annotation instances specify resources that are needed\n * by the application component.  Note that this annotation may\n * appear on private fields and methods of superclasses; the container\n * is required to perform injection in these cases as well.\n```\n","slug":"Spring-circular-dependency","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859da0005b1woj3de2gn5","content":"<p>最近踩了一个继承加循环依赖的坑，抽象出的代码如下：<br>ChildClass:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TestService</span> testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">String</span> play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> testService.getParent().play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ParentClass:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"keyword\">value</span> = <span class=\"string\">\"I am parent class\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span>(<span class=\"params\">String str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>TestService:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent = create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class classDefinition = Class.forName(<span class=\"string\">\"com.springapp.mvc.inherited.ChildClass\"</span>);</span><br><span class=\"line\">            ParentClass parent = (ParentClass) classDefinition.getConstructor(<span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]).newInstance(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ResultController:<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">\"/inherited\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChildClass childClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView printWelcome() &#123;</span><br><span class=\"line\">        ModelAndView modelAndView = new ModelAndView(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"message\"</span>, childClass.play());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。</p>\n<p>之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：<br>ParentClass:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。<br><code>＠Resource</code>部分注解：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Even though this annotation <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> marked Inherited, deployment</span><br><span class=\"line\">* tools are required <span class=\"keyword\">to</span> examine all superclasses <span class=\"keyword\">of</span> any component</span><br><span class=\"line\">* <span class=\"built_in\">class</span> <span class=\"keyword\">to</span> discover all uses <span class=\"keyword\">of</span> this annotation <span class=\"keyword\">in</span> all superclasses.</span><br><span class=\"line\">* All such annotation instances specify resources <span class=\"keyword\">that</span> are needed</span><br><span class=\"line\">* <span class=\"keyword\">by</span> <span class=\"keyword\">the</span> <span class=\"built_in\">application</span> component.  Note <span class=\"keyword\">that</span> this annotation may</span><br><span class=\"line\">* appear <span class=\"keyword\">on</span> private fields <span class=\"keyword\">and</span> methods <span class=\"keyword\">of</span> superclasses; <span class=\"keyword\">the</span> container</span><br><span class=\"line\">* <span class=\"keyword\">is</span> required <span class=\"keyword\">to</span> perform injection <span class=\"keyword\">in</span> these cases <span class=\"keyword\">as</span> well.</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近踩了一个继承加循环依赖的坑，抽象出的代码如下：<br>ChildClass:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TestService</span> testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">String</span> play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> testService.getParent().play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ParentClass:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"keyword\">value</span> = <span class=\"string\">\"I am parent class\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span>(<span class=\"params\">String str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>TestService:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent = create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class classDefinition = Class.forName(<span class=\"string\">\"com.springapp.mvc.inherited.ChildClass\"</span>);</span><br><span class=\"line\">            ParentClass parent = (ParentClass) classDefinition.getConstructor(<span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]).newInstance(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ResultController:<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">\"/inherited\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChildClass childClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView printWelcome() &#123;</span><br><span class=\"line\">        ModelAndView modelAndView = new ModelAndView(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"message\"</span>, childClass.play());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们注意到，ChildClass重写了ParentClass的play方法。由于在TestService中使用反射方式生成了ChildClass的实例，并赋值给了ParentClass的实例，此时ParentClass实例并不能访问到ChildClass实例的成员变量testService，且ParentClass实例的play方法已经被ChildClass实例的play方法隐藏，也就是说<code>testService.getParent().play()</code>实际调用的是ChildClass的play()方法，显而易见，此处出现了循环调用。但是由于ParentClass的实例中<code>testService == null</code>，因此程序在进入这一层时会抛出NPE。</p>\n<p>之后我们使用注解在TestService中实现成员变量parent的初始化，代码如下：<br>ParentClass:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ParentClass parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        parent.setValue(<span class=\"string\">\"I was processed by test service\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ParentClass <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时运行程序，NPE消失了，但是出现栈溢出问题。从<code>＠Resource</code>的注解来看，注解的继承关系是向上的，所有使用注解注入的实例共用资源，即以依赖注入形式实现的ChildClass和ParentClass的实例共享资源。因此，TestService中的成员变量parent可以访问到子类ChildClass实例的成员变量testService，进而形成循环依赖并最终导致栈溢出。<br><code>＠Resource</code>部分注解：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Even though this annotation <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> marked Inherited, deployment</span><br><span class=\"line\">* tools are required <span class=\"keyword\">to</span> examine all superclasses <span class=\"keyword\">of</span> any component</span><br><span class=\"line\">* <span class=\"built_in\">class</span> <span class=\"keyword\">to</span> discover all uses <span class=\"keyword\">of</span> this annotation <span class=\"keyword\">in</span> all superclasses.</span><br><span class=\"line\">* All such annotation instances specify resources <span class=\"keyword\">that</span> are needed</span><br><span class=\"line\">* <span class=\"keyword\">by</span> <span class=\"keyword\">the</span> <span class=\"built_in\">application</span> component.  Note <span class=\"keyword\">that</span> this annotation may</span><br><span class=\"line\">* appear <span class=\"keyword\">on</span> private fields <span class=\"keyword\">and</span> methods <span class=\"keyword\">of</span> superclasses; <span class=\"keyword\">the</span> container</span><br><span class=\"line\">* <span class=\"keyword\">is</span> required <span class=\"keyword\">to</span> perform injection <span class=\"keyword\">in</span> these cases <span class=\"keyword\">as</span> well.</span><br></pre></td></tr></table></figure></p>\n"},{"title":"csrf defense","date":"2015-11-22T06:39:32.000Z","_content":"*本文仅用来自己备忘，更详细内容请[阅读原文](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)。*\n\n## 防止csrf攻击的常用方法\n### 1. HTTP Reference\n**原理**：检查HTTP Reference的地址，判定请求的来源。\n**缺点**：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。\n\n### 2. url中添加token参数\n**原理**：检查请求url中的token值是否是合法的。\n**缺点**：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。\n\n### 3. HTTP协议头部添加自定义属性\n**原理**：检查HTTP头部的csrfToken字段值是否合法。\n**缺点**：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。\n\n### 推荐的防御方式\n2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。\n","source":"_posts/csrf-defense.md","raw":"title: csrf defense\ndate: 2015-11-22 14:39:32\ntags: csrf\n---\n*本文仅用来自己备忘，更详细内容请[阅读原文](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)。*\n\n## 防止csrf攻击的常用方法\n### 1. HTTP Reference\n**原理**：检查HTTP Reference的地址，判定请求的来源。\n**缺点**：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。\n\n### 2. url中添加token参数\n**原理**：检查请求url中的token值是否是合法的。\n**缺点**：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。\n\n### 3. HTTP协议头部添加自定义属性\n**原理**：检查HTTP头部的csrfToken字段值是否合法。\n**缺点**：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。\n\n### 推荐的防御方式\n2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。\n","slug":"csrf-defense","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859db0008b1worjprot6v","content":"<p><em>本文仅用来自己备忘，更详细内容请<a href=\"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/\" target=\"_blank\" rel=\"noopener\">阅读原文</a>。</em></p>\n<h2 id=\"防止csrf攻击的常用方法\"><a href=\"#防止csrf攻击的常用方法\" class=\"headerlink\" title=\"防止csrf攻击的常用方法\"></a>防止csrf攻击的常用方法</h2><h3 id=\"1-HTTP-Reference\"><a href=\"#1-HTTP-Reference\" class=\"headerlink\" title=\"1. HTTP Reference\"></a>1. HTTP Reference</h3><p><strong>原理</strong>：检查HTTP Reference的地址，判定请求的来源。<br><strong>缺点</strong>：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。</p>\n<h3 id=\"2-url中添加token参数\"><a href=\"#2-url中添加token参数\" class=\"headerlink\" title=\"2. url中添加token参数\"></a>2. url中添加token参数</h3><p><strong>原理</strong>：检查请求url中的token值是否是合法的。<br><strong>缺点</strong>：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。</p>\n<h3 id=\"3-HTTP协议头部添加自定义属性\"><a href=\"#3-HTTP协议头部添加自定义属性\" class=\"headerlink\" title=\"3. HTTP协议头部添加自定义属性\"></a>3. HTTP协议头部添加自定义属性</h3><p><strong>原理</strong>：检查HTTP头部的csrfToken字段值是否合法。<br><strong>缺点</strong>：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。</p>\n<h3 id=\"推荐的防御方式\"><a href=\"#推荐的防御方式\" class=\"headerlink\" title=\"推荐的防御方式\"></a>推荐的防御方式</h3><p>2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>本文仅用来自己备忘，更详细内容请<a href=\"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/\" target=\"_blank\" rel=\"noopener\">阅读原文</a>。</em></p>\n<h2 id=\"防止csrf攻击的常用方法\"><a href=\"#防止csrf攻击的常用方法\" class=\"headerlink\" title=\"防止csrf攻击的常用方法\"></a>防止csrf攻击的常用方法</h2><h3 id=\"1-HTTP-Reference\"><a href=\"#1-HTTP-Reference\" class=\"headerlink\" title=\"1. HTTP Reference\"></a>1. HTTP Reference</h3><p><strong>原理</strong>：检查HTTP Reference的地址，判定请求的来源。<br><strong>缺点</strong>：低版本浏览器（IE6等）可以篡改HTTP Reference，达不到防御效果；较新的浏览器允许用户关闭HTTP Reference的使用，致使用户的正常请求也不能通过。</p>\n<h3 id=\"2-url中添加token参数\"><a href=\"#2-url中添加token参数\" class=\"headerlink\" title=\"2. url中添加token参数\"></a>2. url中添加token参数</h3><p><strong>原理</strong>：检查请求url中的token值是否是合法的。<br><strong>缺点</strong>：所有请求地址中添加token字段，实现起来较复杂；url中的token很容易被攻击者获取到。</p>\n<h3 id=\"3-HTTP协议头部添加自定义属性\"><a href=\"#3-HTTP协议头部添加自定义属性\" class=\"headerlink\" title=\"3. HTTP协议头部添加自定义属性\"></a>3. HTTP协议头部添加自定义属性</h3><p><strong>原理</strong>：检查HTTP头部的csrfToken字段值是否合法。<br><strong>缺点</strong>：要使用XMLHttpRequest一次性给该类的所有请求添加csrfToken字段，而XMLHttpRequest的使用局限性很大，并非所有的请求都适合由XMLHttpRequest发起，使用XMLHttpRequest请求到的页面不能被浏览器记录，给用户带来不便。</p>\n<h3 id=\"推荐的防御方式\"><a href=\"#推荐的防御方式\" class=\"headerlink\" title=\"推荐的防御方式\"></a>推荐的防御方式</h3><p>2+3, 对于安全性要求没那么高的请求，可以采用在url中添加token参数的方法防御csrf，对于安全性要求比较高的请求，则使用在HTTP协议头部添加csrfToken的方式。</p>\n"},{"title":"deserialize numeric string for map key in json","date":"2016-02-28T14:21:00.000Z","_content":"\n最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:\n```\n{\n  \"data\": {\n    \"1\": \"观景\",\n    \"2\": \"小资\",\n    \"3\": \"院落\"\n  },\n  \"ret\": true,\n  \"errcode\": 0\n}\n```\n然后使用如下代码对其进行反序列化：\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<Integer, String> dataMap = (Map<Integer, String>) retMap.get(\"data\");\n```\n之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：\n```\nboolean existing = dataMap.containsKey(1);\n```\n明明dataMap中存在key=1的键值对，但是得到的结果却是false。\n此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。\n![cast_numeric_string_to_Integer01.png](/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png)\n深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。\n```\nfinal static class StringKD extends StdKeyDeserializer\n{\n    @Override\n    public String _parse(String key, DeserializationContext ctxt) throws JsonMappingException {\n        return key;\n    }\n}    \n```\n修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<String, String> dataMap = (Map<String, String>) retMap.get(\"data\");\nMap<Integer, String> tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());\nfor (Map.Entry<String, String> entry : dataMap.entrySet()) {\n    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());\n}\nboolean existing = tempMap.containsKey(1);\n```\n当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。\n```\npublic class AjaxResult {\n    private boolean ret;\n    private int errcode;\n    private Map<Integer, String> data;\n\n    public boolean isRet() {\n        return ret;\n    }\n\n    public AjaxResult setRet(boolean ret) {\n        this.ret = ret;\n        return this;\n    }\n\n    public int getErrcode() {\n        return errcode;\n    }\n\n    public AjaxResult setErrcode(int errcode) {\n        this.errcode = errcode;\n        return this;\n    }\n\n    public Map<Integer, String> getData() {\n        return data;\n    }\n\n    public AjaxResult setData(Map<Integer, String> data) {\n        this.data = data;\n        return this;\n    }\n}\n```\n\n```\nAjaxResult ajaxResult = objectMapper.readValue(retStr, new TypeReference<AjaxResult>() {});\nMap<Integer, String> ajaxDataMap = ajaxResult.getData();\ndataNodeMap.containsKey(1);\n```\n","source":"_posts/deserialize-numeric-string-for-map-key-in-json.md","raw":"title: deserialize numeric string for map key in json\ntags:\n  - java\n  - jackson\n  - deserialization\ndate: 2016-02-28 22:21:00\n---\n\n最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:\n```\n{\n  \"data\": {\n    \"1\": \"观景\",\n    \"2\": \"小资\",\n    \"3\": \"院落\"\n  },\n  \"ret\": true,\n  \"errcode\": 0\n}\n```\n然后使用如下代码对其进行反序列化：\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<Integer, String> dataMap = (Map<Integer, String>) retMap.get(\"data\");\n```\n之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：\n```\nboolean existing = dataMap.containsKey(1);\n```\n明明dataMap中存在key=1的键值对，但是得到的结果却是false。\n此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。\n![cast_numeric_string_to_Integer01.png](/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png)\n深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。\n```\nfinal static class StringKD extends StdKeyDeserializer\n{\n    @Override\n    public String _parse(String key, DeserializationContext ctxt) throws JsonMappingException {\n        return key;\n    }\n}    \n```\n修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。\n```\nString retStr = \"{\\\"data\\\":{\\\"1\\\":\\\"观景\\\",\\\"2\\\":\\\"小资\\\",\\\"3\\\":\\\"院落\\\"},\\\"ret\\\":true,\\\"errcode\\\":0}\";\nObjectMapper objectMapper = new ObjectMapper();\nMap<String, Object> retMap = objectMapper.readValue(retStr, new TypeReference<Map<String, Object>>(){});\nMap<String, String> dataMap = (Map<String, String>) retMap.get(\"data\");\nMap<Integer, String> tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());\nfor (Map.Entry<String, String> entry : dataMap.entrySet()) {\n    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());\n}\nboolean existing = tempMap.containsKey(1);\n```\n当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。\n```\npublic class AjaxResult {\n    private boolean ret;\n    private int errcode;\n    private Map<Integer, String> data;\n\n    public boolean isRet() {\n        return ret;\n    }\n\n    public AjaxResult setRet(boolean ret) {\n        this.ret = ret;\n        return this;\n    }\n\n    public int getErrcode() {\n        return errcode;\n    }\n\n    public AjaxResult setErrcode(int errcode) {\n        this.errcode = errcode;\n        return this;\n    }\n\n    public Map<Integer, String> getData() {\n        return data;\n    }\n\n    public AjaxResult setData(Map<Integer, String> data) {\n        this.data = data;\n        return this;\n    }\n}\n```\n\n```\nAjaxResult ajaxResult = objectMapper.readValue(retStr, new TypeReference<AjaxResult>() {});\nMap<Integer, String> ajaxDataMap = ajaxResult.getData();\ndataNodeMap.containsKey(1);\n```\n","slug":"deserialize-numeric-string-for-map-key-in-json","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859dd0009b1wot8vtsqkk","content":"<p>最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"1\"</span>: <span class=\"string\">\"观景\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"2\"</span>: <span class=\"string\">\"小资\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"3\"</span>: <span class=\"string\">\"院落\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ret\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"errcode\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后使用如下代码对其进行反序列化：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String retStr = <span class=\"string\">\"&#123;<span class=\"subst\">\\\"</span>data<span class=\"subst\">\\\"</span>:&#123;<span class=\"subst\">\\\"</span>1<span class=\"subst\">\\\"</span>:<span class=\"subst\">\\\"</span>观景<span class=\"subst\">\\\"</span>,<span class=\"subst\">\\\"</span>2<span class=\"subst\">\\\"</span>:<span class=\"subst\">\\\"</span>小资<span class=\"subst\">\\\"</span>,<span class=\"subst\">\\\"</span>3<span class=\"subst\">\\\"</span>:<span class=\"subst\">\\\"</span>院落<span class=\"subst\">\\\"</span>&#125;,<span class=\"subst\">\\\"</span>ret<span class=\"subst\">\\\"</span>:true,<span class=\"subst\">\\\"</span>errcode<span class=\"subst\">\\\"</span>:0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = new ObjectMapper();</span><br><span class=\"line\">Map&lt;String, Object&gt; retMap = objectMapper.readValue(retStr, new TypeReference&lt;Map&lt;String, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;Integer, String&gt; dataMap = (Map&lt;Integer, String&gt;) retMap.get(<span class=\"string\">\"data\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">boolean existing</span> = dataMap.containsKey(1);</span><br></pre></td></tr></table></figure></p>\n<p>明明dataMap中存在key=1的键值对，但是得到的结果却是false。<br>此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。<br><img src=\"/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png\" alt=\"cast_numeric_string_to_Integer01.png\"><br>深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringKD</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdKeyDeserializer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">String</span> _parse(<span class=\"type\">String</span> key, <span class=\"type\">DeserializationContext</span> ctxt) <span class=\"keyword\">throws</span> <span class=\"type\">JsonMappingException</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> retStr = <span class=\"string\">\"&#123;\\\"</span>data\\<span class=\"string\">\":&#123;\\\"</span><span class=\"number\">1</span>\\<span class=\"string\">\":\\\"</span>观景\\<span class=\"string\">\",\\\"</span><span class=\"number\">2</span>\\<span class=\"string\">\":\\\"</span>小资\\<span class=\"string\">\",\\\"</span><span class=\"number\">3</span>\\<span class=\"string\">\":\\\"</span>院落\\<span class=\"string\">\"&#125;,\\\"</span>ret\\<span class=\"string\">\":true,\\\"</span>errcode\\<span class=\"string\">\":0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, Object&gt; retMap = objectMapper.readValue(retStr, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;<span class=\"built_in\">String</span>, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; dataMap = (Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;) retMap.<span class=\"keyword\">get</span>(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">Map&lt;Integer, <span class=\"built_in\">String</span>&gt; tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; entry : dataMap.entrySet()) &#123;</span><br><span class=\"line\">    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">boolean existing = tempMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxResult</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> boolean ret;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int errcode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; <span class=\"keyword\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> boolean isRet() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult setRet(boolean ret) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ret = ret;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> int getErrcode() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errcode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult setErrcode(int errcode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errcode = errcode;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer, String&gt; getData() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult setData(Map&lt;Integer, String&gt; <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = <span class=\"keyword\">data</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AjaxResult ajaxResult = objectMapper.readValue(retStr, <span class=\"literal\">new</span> TypeReference&lt;AjaxResult&gt;() &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Integer</span>, <span class=\"built_in\">String</span>&gt; ajaxDataMap = ajaxResult.getData();</span><br><span class=\"line\">dataNodeMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近反序列化json的时候，踩到了一个jackson转换map key的坑。踩坑时反序列化的数据格式如下:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"1\"</span>: <span class=\"string\">\"观景\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"2\"</span>: <span class=\"string\">\"小资\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"3\"</span>: <span class=\"string\">\"院落\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ret\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"errcode\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后使用如下代码对其进行反序列化：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String retStr = <span class=\"string\">\"&#123;<span class=\"subst\">\\\"</span>data<span class=\"subst\">\\\"</span>:&#123;<span class=\"subst\">\\\"</span>1<span class=\"subst\">\\\"</span>:<span class=\"subst\">\\\"</span>观景<span class=\"subst\">\\\"</span>,<span class=\"subst\">\\\"</span>2<span class=\"subst\">\\\"</span>:<span class=\"subst\">\\\"</span>小资<span class=\"subst\">\\\"</span>,<span class=\"subst\">\\\"</span>3<span class=\"subst\">\\\"</span>:<span class=\"subst\">\\\"</span>院落<span class=\"subst\">\\\"</span>&#125;,<span class=\"subst\">\\\"</span>ret<span class=\"subst\">\\\"</span>:true,<span class=\"subst\">\\\"</span>errcode<span class=\"subst\">\\\"</span>:0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = new ObjectMapper();</span><br><span class=\"line\">Map&lt;String, Object&gt; retMap = objectMapper.readValue(retStr, new TypeReference&lt;Map&lt;String, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;Integer, String&gt; dataMap = (Map&lt;Integer, String&gt;) retMap.get(<span class=\"string\">\"data\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>之后针对一些数字，需要判断dataMap中是否存在这个key，这里调用的是Map的containsKey()方法：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">boolean existing</span> = dataMap.containsKey(1);</span><br></pre></td></tr></table></figure></p>\n<p>明明dataMap中存在key=1的键值对，但是得到的结果却是false。<br>此时debug查看dataMap的内容(如下)，发现dataMap中是存在key=1的键值对的。但是查看key的类型，并不是int而是char，而上边调用constainsKey()方法传入的参数是int，因此返回false。<br><img src=\"/blog/2016/02/28/deserialize-numeric-string-for-map-key-in-json/image01.png\" alt=\"cast_numeric_string_to_Integer01.png\"><br>深扒了一下jackson的底层代码，发现它在反序列化map的key的时候，如果没有明确指定key的类型，将默认按照String类型处理，最终调用的是<code>StringKD</code>的<code>_parse</code>方法，直接将json中的数字以字符串的形式返回了。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringKD</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdKeyDeserializer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">String</span> _parse(<span class=\"type\">String</span> key, <span class=\"type\">DeserializationContext</span> ctxt) <span class=\"keyword\">throws</span> <span class=\"type\">JsonMappingException</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改代码如下，显式地将key转化为Integer类型，我们得到了想要的结果。<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> retStr = <span class=\"string\">\"&#123;\\\"</span>data\\<span class=\"string\">\":&#123;\\\"</span><span class=\"number\">1</span>\\<span class=\"string\">\":\\\"</span>观景\\<span class=\"string\">\",\\\"</span><span class=\"number\">2</span>\\<span class=\"string\">\":\\\"</span>小资\\<span class=\"string\">\",\\\"</span><span class=\"number\">3</span>\\<span class=\"string\">\":\\\"</span>院落\\<span class=\"string\">\"&#125;,\\\"</span>ret\\<span class=\"string\">\":true,\\\"</span>errcode\\<span class=\"string\">\":0&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, Object&gt; retMap = objectMapper.readValue(retStr, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;<span class=\"built_in\">String</span>, Object&gt;&gt;()&#123;&#125;);</span><br><span class=\"line\">Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; dataMap = (Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;) retMap.<span class=\"keyword\">get</span>(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">Map&lt;Integer, <span class=\"built_in\">String</span>&gt; tempMap = Maps.newHashMapWithExpectedSize(dataMap.size());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; entry : dataMap.entrySet()) &#123;</span><br><span class=\"line\">    tempMap.put(Integer.valueOf(entry.getKey()), entry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">boolean existing = tempMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>当然还有另外一种解决方案，就是用明确了数据类型的类(即下面的<code>AjaxResult</code>)去接收反序列化的结果，代码如下，这个时候jackson知道了map key的类型，直接调用了<code>IntKD</code>的<code>_parse</code>，将字符串转化为Integer之后返回。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxResult</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> boolean ret;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int errcode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; <span class=\"keyword\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> boolean isRet() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult setRet(boolean ret) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ret = ret;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> int getErrcode() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errcode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult setErrcode(int errcode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errcode = errcode;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer, String&gt; getData() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AjaxResult setData(Map&lt;Integer, String&gt; <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = <span class=\"keyword\">data</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AjaxResult ajaxResult = objectMapper.readValue(retStr, <span class=\"literal\">new</span> TypeReference&lt;AjaxResult&gt;() &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Integer</span>, <span class=\"built_in\">String</span>&gt; ajaxDataMap = ajaxResult.getData();</span><br><span class=\"line\">dataNodeMap.containsKey(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"git base commands","date":"2015-09-24T03:52:12.000Z","_content":"### 初始化\n```\n$ mkdir test\n$ cd test\n$ git init\n```\n\n### config\n```\n$ git config --global user.name username\n$ git config --global user.email useremail.chn@gmail.com\n```\n\n### 文件修改 、查看状态、文件添加以及修改提交\n```\n$ echo \"hello world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"first\" //提交第一个版本\n$ echo \"hello new world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"second\" //提交第二个版本\n```\n\n### 版本切换\n查看更新记录\n```\n$ git log\n```\n使用能够区别版本的前几位即可\n```\n$ git checkout commit-id\n```\n\n### 远程提交\n添加远程仓库\n```\n$ git remote add origin https://github.com/windpuller/test.git\n```\n将修改提交到服务器端\n```\n$ git push -u origin master\n```\n\n### 检出仓库\n创建本地仓库的克隆版本\n```\n$ git clone /path/to/repository\n```\n创建远端服务器的克隆版本\n```\n$ git clone uxername@host:/past/to/repository\n```\n\n### 分支\n创建分支\n```\n$ git branch branch1\n```\n切换分支\n```\n$ git checkout branch1\n```\n删除本地分支\n```\n$ git branch -d branch1\n```\n删除远程分支(慎重使用)\n```\n$ git branch -r -d origin/branch1\n$ git push origin :branch1\n```\n将分支推送到远端仓库，不推送的话分支是不为他人所见的\n```\n$ git push origin branch1\n```\n\n\n### 更新与合并\n更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能\n```\n$ git pull\n```\n合并其他分支到当前分支\n```\n$ git merge branch\n```\n在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。\n在合并改动之前，可以使用如下命令预览差异：\n```\n$git diff source_branch target_branch\n```\n\n### 标签\n为某个版本创建标签\n```\n$ git tag tag-name commit-ID\n```\n\n### 替换本地改动\n如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响\n```\n$ git checkout -- filename\n```\n如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：\n```\n$ git fetch origin\n$ git reset --hard origin/master\n```\n\n### 实用小贴士\n内建的图形化git\n```\n$ gitk\n```\n彩色的git输出\n```\n$ git config color.ui true\n```\n显示历史记录时，每个提交的信息只显示一行\n```\n$ git config format.pretty oneline\n```\n交互式添加文件到暂存区\n```\n$ git add -i\n```\n\n### 参考文献：\n1. http://rogerdudler.github.io/git-guide/index.zh.html\n","source":"_posts/git-base-commands.md","raw":"title: git base commands\ndate: 2015-09-24 11:52:12\ntags: git\n---\n### 初始化\n```\n$ mkdir test\n$ cd test\n$ git init\n```\n\n### config\n```\n$ git config --global user.name username\n$ git config --global user.email useremail.chn@gmail.com\n```\n\n### 文件修改 、查看状态、文件添加以及修改提交\n```\n$ echo \"hello world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"first\" //提交第一个版本\n$ echo \"hello new world\">>new.txt\n$ git status\n$ git add new.txt\n$ git status\n$ git commit -m \"second\" //提交第二个版本\n```\n\n### 版本切换\n查看更新记录\n```\n$ git log\n```\n使用能够区别版本的前几位即可\n```\n$ git checkout commit-id\n```\n\n### 远程提交\n添加远程仓库\n```\n$ git remote add origin https://github.com/windpuller/test.git\n```\n将修改提交到服务器端\n```\n$ git push -u origin master\n```\n\n### 检出仓库\n创建本地仓库的克隆版本\n```\n$ git clone /path/to/repository\n```\n创建远端服务器的克隆版本\n```\n$ git clone uxername@host:/past/to/repository\n```\n\n### 分支\n创建分支\n```\n$ git branch branch1\n```\n切换分支\n```\n$ git checkout branch1\n```\n删除本地分支\n```\n$ git branch -d branch1\n```\n删除远程分支(慎重使用)\n```\n$ git branch -r -d origin/branch1\n$ git push origin :branch1\n```\n将分支推送到远端仓库，不推送的话分支是不为他人所见的\n```\n$ git push origin branch1\n```\n\n\n### 更新与合并\n更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能\n```\n$ git pull\n```\n合并其他分支到当前分支\n```\n$ git merge branch\n```\n在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。\n在合并改动之前，可以使用如下命令预览差异：\n```\n$git diff source_branch target_branch\n```\n\n### 标签\n为某个版本创建标签\n```\n$ git tag tag-name commit-ID\n```\n\n### 替换本地改动\n如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响\n```\n$ git checkout -- filename\n```\n如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：\n```\n$ git fetch origin\n$ git reset --hard origin/master\n```\n\n### 实用小贴士\n内建的图形化git\n```\n$ gitk\n```\n彩色的git输出\n```\n$ git config color.ui true\n```\n显示历史记录时，每个提交的信息只显示一行\n```\n$ git config format.pretty oneline\n```\n交互式添加文件到暂存区\n```\n$ git add -i\n```\n\n### 参考文献：\n1. http://rogerdudler.github.io/git-guide/index.zh.html\n","slug":"git-base-commands","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859de000ab1womg4bs4yl","content":"<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.name username</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.email useremail.chn@gmail.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件修改-、查看状态、文件添加以及修改提交\"><a href=\"#文件修改-、查看状态、文件添加以及修改提交\" class=\"headerlink\" title=\"文件修改 、查看状态、文件添加以及修改提交\"></a>文件修改 、查看状态、文件添加以及修改提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span>&gt;&gt;new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"first\"</span> //提交第一个版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"hello new world\"</span>&gt;&gt;new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"second\"</span> //提交第二个版本</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本切换\"><a href=\"#版本切换\" class=\"headerlink\" title=\"版本切换\"></a>版本切换</h3><p>查看更新记录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br></pre></td></tr></table></figure></p>\n<p>使用能够区别版本的前几位即可<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout commit-id</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"远程提交\"><a href=\"#远程提交\" class=\"headerlink\" title=\"远程提交\"></a>远程提交</h3><p>添加远程仓库<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/windpuller/test.git</span><br></pre></td></tr></table></figure></p>\n<p>将修改提交到服务器端<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h3><p>创建本地仓库的克隆版本<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">/path</span>/to/repository</span><br></pre></td></tr></table></figure></p>\n<p>创建远端服务器的克隆版本<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git clone uxername<span class=\"variable\">@host</span><span class=\"symbol\">:/past/to/repository</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>创建分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>切换分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>删除远程分支(慎重使用)<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -r -d origin/branch1</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin :branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>将分支推送到远端仓库，不推送的话分支是不为他人所见的<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> branch1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h3><p>更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull</span></span><br></pre></td></tr></table></figure></p>\n<p>合并其他分支到当前分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge branch</span></span><br></pre></td></tr></table></figure></p>\n<p>在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。<br>在合并改动之前，可以使用如下命令预览差异：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> diff source_branch target_branch</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>为某个版本创建标签<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">tag-name</span> commit-ID</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h3><p>如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -- filename</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch origin</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard origin/master</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实用小贴士\"><a href=\"#实用小贴士\" class=\"headerlink\" title=\"实用小贴士\"></a>实用小贴士</h3><p>内建的图形化git<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitk</span></span><br></pre></td></tr></table></figure></p>\n<p>彩色的git输出<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>显示历史记录时，每个提交的信息只显示一行<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>format.pretty oneline</span><br></pre></td></tr></table></figure></p>\n<p>交互式添加文件到暂存区<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> -i</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ol>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">http://rogerdudler.github.io/git-guide/index.zh.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.name username</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.email useremail.chn@gmail.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件修改-、查看状态、文件添加以及修改提交\"><a href=\"#文件修改-、查看状态、文件添加以及修改提交\" class=\"headerlink\" title=\"文件修改 、查看状态、文件添加以及修改提交\"></a>文件修改 、查看状态、文件添加以及修改提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span>&gt;&gt;new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"first\"</span> //提交第一个版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"hello new world\"</span>&gt;&gt;new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add new.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"second\"</span> //提交第二个版本</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本切换\"><a href=\"#版本切换\" class=\"headerlink\" title=\"版本切换\"></a>版本切换</h3><p>查看更新记录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br></pre></td></tr></table></figure></p>\n<p>使用能够区别版本的前几位即可<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout commit-id</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"远程提交\"><a href=\"#远程提交\" class=\"headerlink\" title=\"远程提交\"></a>远程提交</h3><p>添加远程仓库<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/windpuller/test.git</span><br></pre></td></tr></table></figure></p>\n<p>将修改提交到服务器端<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h3><p>创建本地仓库的克隆版本<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">/path</span>/to/repository</span><br></pre></td></tr></table></figure></p>\n<p>创建远端服务器的克隆版本<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git clone uxername<span class=\"variable\">@host</span><span class=\"symbol\">:/past/to/repository</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>创建分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>切换分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>删除远程分支(慎重使用)<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -r -d origin/branch1</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin :branch1</span></span><br></pre></td></tr></table></figure></p>\n<p>将分支推送到远端仓库，不推送的话分支是不为他人所见的<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> branch1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h3><p>更新本地仓库至最新改动，完成了获取fetch并合并merge改动的功能<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull</span></span><br></pre></td></tr></table></figure></p>\n<p>合并其他分支到当前分支<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge branch</span></span><br></pre></td></tr></table></figure></p>\n<p>在以上两种情况下，git都会尝试自动合并改动。但是不是每次合并都能成功，可能出现冲突。这时候就需要修改文件来手动合并这些冲突。改完文件之后，需要重新commit。<br>在合并改动之前，可以使用如下命令预览差异：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> diff source_branch target_branch</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>为某个版本创建标签<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">tag-name</span> commit-ID</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h3><p>如果操作失误，可以使用HEAD中的最新内容替换掉工作目录中的文件，已添加到缓存区的改动和新文件都不会受到影响<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -- filename</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想要放弃本地的所有改动和提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch origin</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard origin/master</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实用小贴士\"><a href=\"#实用小贴士\" class=\"headerlink\" title=\"实用小贴士\"></a>实用小贴士</h3><p>内建的图形化git<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitk</span></span><br></pre></td></tr></table></figure></p>\n<p>彩色的git输出<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>显示历史记录时，每个提交的信息只显示一行<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>format.pretty oneline</span><br></pre></td></tr></table></figure></p>\n<p>交互式添加文件到暂存区<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> -i</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ol>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">http://rogerdudler.github.io/git-guide/index.zh.html</a></li>\n</ol>\n"},{"title":"mount partitions on startup in archlinux","date":"2016-01-17T09:36:47.000Z","_content":"\n机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。\n\n### 第一步，grub rescue的处理\n先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。\n解决办法是：\n1. 列出所有分区\n```\ngrub rescue> ls\n```\n2. 依次ls每个分区直到找到不报'unknown filesystem'的分区，比如n=5\n```\ngrub rescue> ls (hd0,msdos5)/boot/grub\n```\n3. 依次执行以下命令，可进入正常的系统引导界面\n```\ngrub rescue> set root=(hd0,msdos5)/boot/grub\ngrub rescue> set prefix=(hd0,msdos5)/boot/grub\ngrub rescue> insmod normal\ngrub rescue> normal\n```\n4. 进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常\n```\n$ sudo grub-install /dev/sda\n```\n\n### 第二步，archlinux挂载分区\n配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend\n1. 找到要挂载的新分区硬盘号码，比如/dev/sda5\n```\n$ sudo fdisk -l\n```\n2. 格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)\n```\n$ sudo mkfs.ext4 /dev/sda5\n```\n3. 配置新分区在系统启动的时候挂载，并映射为/extend\n修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序\n```\nUUID=59f8ba70-62d4-4d1d-982e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   0 3\n```\n","source":"_posts/mount-partitions-on-startup-in-archlinux.md","raw":"title: mount partitions on startup in archlinux\ndate: 2016-01-17 17:36:47\ntags: [archlinux, mount partitions, grub rescue]\n---\n\n机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。\n\n### 第一步，grub rescue的处理\n先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。\n解决办法是：\n1. 列出所有分区\n```\ngrub rescue> ls\n```\n2. 依次ls每个分区直到找到不报'unknown filesystem'的分区，比如n=5\n```\ngrub rescue> ls (hd0,msdos5)/boot/grub\n```\n3. 依次执行以下命令，可进入正常的系统引导界面\n```\ngrub rescue> set root=(hd0,msdos5)/boot/grub\ngrub rescue> set prefix=(hd0,msdos5)/boot/grub\ngrub rescue> insmod normal\ngrub rescue> normal\n```\n4. 进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常\n```\n$ sudo grub-install /dev/sda\n```\n\n### 第二步，archlinux挂载分区\n配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend\n1. 找到要挂载的新分区硬盘号码，比如/dev/sda5\n```\n$ sudo fdisk -l\n```\n2. 格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)\n```\n$ sudo mkfs.ext4 /dev/sda5\n```\n3. 配置新分区在系统启动的时候挂载，并映射为/extend\n修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序\n```\nUUID=59f8ba70-62d4-4d1d-982e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   0 3\n```\n","slug":"mount-partitions-on-startup-in-archlinux","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859df000db1wog21xftvz","content":"<p>机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。</p>\n<h3 id=\"第一步，grub-rescue的处理\"><a href=\"#第一步，grub-rescue的处理\" class=\"headerlink\" title=\"第一步，grub rescue的处理\"></a>第一步，grub rescue的处理</h3><p>先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。<br>解决办法是：</p>\n<ol>\n<li><p>列出所有分区</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub <span class=\"keyword\">rescue</span>&gt; ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次ls每个分区直到找到不报’unknown filesystem’的分区，比如n=5</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; <span class=\"keyword\">ls</span> <span class=\"params\">(hd0,msdos5)</span><span class=\"string\">/boot/grub</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下命令，可进入正常的系统引导界面</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; <span class=\"keyword\">set</span> root=(hd0,msdos5)/boot/grub</span><br><span class=\"line\">grub <span class=\"comment\">rescue&gt; set prefix=(hd0,msdos5)</span>/boot/<span class=\"comment\">grub</span></span><br><span class=\"line\">grub <span class=\"comment\">rescue&gt; insmod normal</span></span><br><span class=\"line\">grub <span class=\"comment\">rescue&gt; normal</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo grub-install /dev/sda</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"第二步，archlinux挂载分区\"><a href=\"#第二步，archlinux挂载分区\" class=\"headerlink\" title=\"第二步，archlinux挂载分区\"></a>第二步，archlinux挂载分区</h3><p>配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend</p>\n<ol>\n<li><p>找到要挂载的新分区硬盘号码，比如/dev/sda5</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo fdisk -l</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo mkfs.ext4 /dev/sda5</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置新分区在系统启动的时候挂载，并映射为/extend<br>修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=<span class=\"number\">59</span>f8ba70<span class=\"number\">-62</span>d4<span class=\"number\">-4</span>d1d<span class=\"number\">-982</span>e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   <span class=\"number\">0</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>机器装了两个系统，一个win7备用，一个linux生产。但是最近linux的剩余磁盘空间仅10G多，眼看就要不够用了，于是想着挤挤win7，分些空间出来给linux。</p>\n<h3 id=\"第一步，grub-rescue的处理\"><a href=\"#第一步，grub-rescue的处理\" class=\"headerlink\" title=\"第一步，grub rescue的处理\"></a>第一步，grub rescue的处理</h3><p>先在win7中压缩了20G出来，然后重启机器准备进入linux加载新分区，此时出现了问题，grub无法正常启动，进入了rescue界面。<br>解决办法是：</p>\n<ol>\n<li><p>列出所有分区</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub <span class=\"keyword\">rescue</span>&gt; ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次ls每个分区直到找到不报’unknown filesystem’的分区，比如n=5</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; <span class=\"keyword\">ls</span> <span class=\"params\">(hd0,msdos5)</span><span class=\"string\">/boot/grub</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下命令，可进入正常的系统引导界面</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub rescue&gt; <span class=\"keyword\">set</span> root=(hd0,msdos5)/boot/grub</span><br><span class=\"line\">grub <span class=\"comment\">rescue&gt; set prefix=(hd0,msdos5)</span>/boot/<span class=\"comment\">grub</span></span><br><span class=\"line\">grub <span class=\"comment\">rescue&gt; insmod normal</span></span><br><span class=\"line\">grub <span class=\"comment\">rescue&gt; normal</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入linux操作系统，执行以下命令修复grub，重启后grub可恢复正常</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo grub-install /dev/sda</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"第二步，archlinux挂载分区\"><a href=\"#第二步，archlinux挂载分区\" class=\"headerlink\" title=\"第二步，archlinux挂载分区\"></a>第二步，archlinux挂载分区</h3><p>配置新分区在linux启动的时候自动挂载，并映射到某一个文件路径，比如/extend</p>\n<ol>\n<li><p>找到要挂载的新分区硬盘号码，比如/dev/sda5</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo fdisk -l</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式化/dev/sda5为linux系统的文件格式(也可使用其它稳定的文件格式)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo mkfs.ext4 /dev/sda5</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置新分区在系统启动的时候挂载，并映射为/extend<br>修改<code>/etc/fstab</code>文件，在最后添加一行，注意使用对应的UUID并修改加载顺序</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=<span class=\"number\">59</span>f8ba70<span class=\"number\">-62</span>d4<span class=\"number\">-4</span>d1d<span class=\"number\">-982</span>e-a33166d59394  /extend  ext4  rw,relatime,data=ordered   <span class=\"number\">0</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"@transactional","date":"2015-11-08T03:36:44.000Z","_content":"在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。\n在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。\n同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。\n之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。\n如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：\n```\n@Service(\"transactionalTestClass\")\npublic class TransactionalTestClass {\n    \n    @Resource(\"transactionalTestClass\")\n    private TransactionalTestClass transactionalTestClass;\n    \n    public void noTransactionalMethod(){\n        transactionalTestClass.transactionalMethod();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transactionalMethod() {\n        //do somthing\n    }\n}\n```","source":"_posts/transactional.md","raw":"title: '@transactional'\ndate: 2015-11-08 11:36:44\ntags: [transactional, spring, java]\n---\n在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。\n在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。\n同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。\n之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。\n如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：\n```\n@Service(\"transactionalTestClass\")\npublic class TransactionalTestClass {\n    \n    @Resource(\"transactionalTestClass\")\n    private TransactionalTestClass transactionalTestClass;\n    \n    public void noTransactionalMethod(){\n        transactionalTestClass.transactionalMethod();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transactionalMethod() {\n        //do somthing\n    }\n}\n```","slug":"transactional","published":1,"updated":"2016-09-02T10:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfm859dg000eb1wonv4jgajo","content":"<p>在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。<br>在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。<br>同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。<br>之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。<br>如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionalTestClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionalTestClass transactionalTestClass;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noTransactionalMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        transactionalTestClass.transactionalMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transactionalMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do somthing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<code>＠Transactional</code>注解的程序块中调用未使用<code>＠Transactional</code>注解的方法，则事务将在未被注解的方法中继续生效。在未被注解的方法中，继续使用事务中的数据库连接，该方法中的任何异常都会引起事务的回滚。<br>在<code>＠Transactional</code>注解的程序块中调用使用<code>＠Transactional</code>注解的方法，如果这两个方法属于同一个实例，那么事务在被调用的方法中不会生效；如果两个方法属于不同的实例，则事务在被调用的方法中继续生效。<br>同理，在一个实例内部，通过未被<code>＠Transactional</code>注解的方法调用被<code>＠Transactional</code>注解的方法，被调用方法的事务也不会生效。<br>之所以会出现以上现象，是受到Spring AOP机制的限制。<code>＠Transactional</code>注解使用的是Spring的AOP机制，AOP仅在外部实例调用被注解的方法时才会生效，在同一个实例中调用任何被注解的方法都只能调用到原生方法，而不是注解后生成的代理方法。<br>如果不得不在一个实例内部调用被<code>＠Transactional</code>注解的方法，需要在这个实例内部显示的注入自身类的实例，并通过这个被注入的实例调用被注解的方法，才能访问到代理方法使事务生效。示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionalTestClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(<span class=\"string\">\"transactionalTestClass\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionalTestClass transactionalTestClass;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noTransactionalMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        transactionalTestClass.transactionalMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transactionalMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do somthing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/deserialize-numeric-string-for-map-key-in-json/image01.png","slug":"image01.png","post":"cjfm859dd0009b1wot8vtsqkk","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjfm859d00000b1wo6e59tg5p","tag_id":"cjfm859d70002b1wopsx3g332","_id":"cjfm859db0007b1wo82ux72ge"},{"post_id":"cjfm859d90004b1wot7t5bmbe","tag_id":"cjfm859db0006b1wov6gnxix5","_id":"cjfm859df000cb1wovmvy0gmg"},{"post_id":"cjfm859da0005b1woj3de2gn5","tag_id":"cjfm859df000bb1wocdie2vbb","_id":"cjfm859di000jb1wonl3j31id"},{"post_id":"cjfm859da0005b1woj3de2gn5","tag_id":"cjfm859dh000fb1woir6zb20h","_id":"cjfm859di000kb1woi3qqt2th"},{"post_id":"cjfm859da0005b1woj3de2gn5","tag_id":"cjfm859di000gb1woh36ydb1u","_id":"cjfm859dj000mb1woahlo0kaq"},{"post_id":"cjfm859da0005b1woj3de2gn5","tag_id":"cjfm859di000hb1wohgj6j7mk","_id":"cjfm859dk000nb1wo5epn8zua"},{"post_id":"cjfm859db0008b1worjprot6v","tag_id":"cjfm859di000ib1woeu2jw37t","_id":"cjfm859dk000pb1woaemfenmh"},{"post_id":"cjfm859dd0009b1wot8vtsqkk","tag_id":"cjfm859di000gb1woh36ydb1u","_id":"cjfm859dl000sb1wowfujf4wn"},{"post_id":"cjfm859dd0009b1wot8vtsqkk","tag_id":"cjfm859dk000ob1wobkvx8dwq","_id":"cjfm859dl000tb1womnx8d2uc"},{"post_id":"cjfm859dd0009b1wot8vtsqkk","tag_id":"cjfm859dk000qb1woc4aptpmp","_id":"cjfm859dl000vb1wohgm0emc6"},{"post_id":"cjfm859de000ab1womg4bs4yl","tag_id":"cjfm859dk000rb1woko728nwy","_id":"cjfm859dl000wb1wocjzwp9tl"},{"post_id":"cjfm859df000db1wog21xftvz","tag_id":"cjfm859d70002b1wopsx3g332","_id":"cjfm859dm000zb1wo6p54fyxz"},{"post_id":"cjfm859df000db1wog21xftvz","tag_id":"cjfm859dl000ub1woup1apwlc","_id":"cjfm859dm0010b1wobj1aufwg"},{"post_id":"cjfm859df000db1wog21xftvz","tag_id":"cjfm859dl000xb1woahe2hhww","_id":"cjfm859dn0012b1wogi83xw94"},{"post_id":"cjfm859dg000eb1wonv4jgajo","tag_id":"cjfm859dm000yb1womnk8ynqm","_id":"cjfm859do0014b1woeeo1xafr"},{"post_id":"cjfm859dg000eb1wonv4jgajo","tag_id":"cjfm859dh000fb1woir6zb20h","_id":"cjfm859do0015b1woqztoec2v"},{"post_id":"cjfm859dg000eb1wonv4jgajo","tag_id":"cjfm859di000gb1woh36ydb1u","_id":"cjfm859do0016b1woge6zffmw"}],"Tag":[{"name":"archlinux","_id":"cjfm859d70002b1wopsx3g332"},{"name":"restful","_id":"cjfm859db0006b1wov6gnxix5"},{"name":"circular dependency","_id":"cjfm859df000bb1wocdie2vbb"},{"name":"spring","_id":"cjfm859dh000fb1woir6zb20h"},{"name":"java","_id":"cjfm859di000gb1woh36ydb1u"},{"name":"inherited","_id":"cjfm859di000hb1wohgj6j7mk"},{"name":"csrf","_id":"cjfm859di000ib1woeu2jw37t"},{"name":"jackson","_id":"cjfm859dk000ob1wobkvx8dwq"},{"name":"deserialization","_id":"cjfm859dk000qb1woc4aptpmp"},{"name":"git","_id":"cjfm859dk000rb1woko728nwy"},{"name":"mount partitions","_id":"cjfm859dl000ub1woup1apwlc"},{"name":"grub rescue","_id":"cjfm859dl000xb1woahe2hhww"},{"name":"transactional","_id":"cjfm859dm000yb1womnk8ynqm"}]}}